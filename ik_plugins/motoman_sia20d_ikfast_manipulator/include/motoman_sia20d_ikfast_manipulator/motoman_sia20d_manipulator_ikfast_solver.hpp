/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-02-17 14:55:22.344206
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

#ifndef MOTOMAN_SIA20D_MANIPULATOR_IKFAST_SOLVER
#define MOTOMAN_SIA20D_MANIPULATOR_IKFAST_SOLVER

#define IKFAST_HAS_LIBRARY
#include <motoman_sia20d_ikfast_manipulator/ikfast.h> // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( std::isnan(fy) ) {
        IKFAST_ASSERT(!std::isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( std::isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( std::isnan(fy) ) {
        IKFAST_ASSERT(!std::isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( std::isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[2]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(1.00000000000000))*(x1));
x16=((IkReal(0.180000000000000))*(x9));
x17=((IkReal(0.420000000000000))*(x2));
x18=((IkReal(1.00000000000000))*(x9));
x19=((IkReal(1.00000000000000))*(x2));
x20=((IkReal(0.180000000000000))*(x1));
x21=((IkReal(1.00000000000000))*(x13));
x22=((IkReal(1.00000000000000))*(x8));
x23=((IkReal(0.180000000000000))*(x5));
x24=((IkReal(1.00000000000000))*(x5));
x25=((IkReal(0.420000000000000))*(x1));
x26=((IkReal(1.00000000000000))*(x12));
x27=((x0)*(x7));
x28=((IkReal(-1.00000000000000))*(x13));
x29=((x3)*(x6));
x30=((x0)*(x4));
x31=((x4)*(x8));
x32=((x4)*(x6));
x33=((x6)*(x7));
x34=((x0)*(x3));
x35=((x3)*(x4));
x36=((IkReal(-1.00000000000000))*(x12));
x37=((x14)*(x6));
x38=((x15)*(x35));
x39=((x14)*(x4)*(x9));
x40=((x14)*(x31));
x41=((((IkReal(-1.00000000000000))*(x37)))+(((x2)*(x34))));
x42=((((x2)*(x27)))+(x29));
x43=((((x2)*(x29)))+(x27));
x44=((((IkReal(-1.00000000000000))*(x34)))+(((x2)*(x33))));
x45=((((IkReal(-1.00000000000000))*(x38)))+(((x2)*(x5))));
x46=((((x1)*(x2)))+(((x35)*(x5))));
x47=((((IkReal(-1.00000000000000))*(x19)*(x34)))+(x37));
x48=((((IkReal(-1.00000000000000))*(x19)*(x5)))+(x38));
x49=((((IkReal(-1.00000000000000))*(x0)*(x14)))+(((IkReal(-1.00000000000000))*(x19)*(x29))));
x50=((x42)*(x8));
x51=((x1)*(x41));
x52=((x44)*(x8));
x53=((x49)*(x5));
x54=((((x30)*(x5)))+(x51));
x55=((((x32)*(x5)))+(((x1)*(x43))));
x56=((((x47)*(x5)))+(((x1)*(x30))));
x57=((((IkReal(-1.00000000000000))*(x15)*(x43)))+(((IkReal(-1.00000000000000))*(x24)*(x32))));
x58=((x53)+(((x1)*(x32))));
x59=((x54)*(x9));
x60=((x59)+(x50));
x61=((x52)+(((x55)*(x9))));
x62=((((x21)*(((((IkReal(-1.00000000000000))*(x45)*(x9)))+(x40)))))+(((IkReal(-1.00000000000000))*(x26)*(x46))));
x63=((x13)*(x60));
eerot[0]=((((x10)*(((((x36)*(x56)))+(((x28)*(x60)))))))+(((IkReal(-1.00000000000000))*(x11)*(((((x18)*(x42)))+(((x22)*(((((IkReal(-1.00000000000000))*(x15)*(x41)))+(((IkReal(-1.00000000000000))*(x24)*(x30))))))))))));
eerot[1]=((((x10)*(((((x42)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x51)))+(((IkReal(-1.00000000000000))*(x30)*(x5)))))))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x26)*(x56)))+(((IkReal(-1.00000000000000))*(x21)*(x60))))))));
eerot[2]=((((x12)*(((((IkReal(-1.00000000000000))*(x18)*(x54)))+(((IkReal(-1.00000000000000))*(x22)*(x42)))))))+(((x13)*(x56))));
eetrans[0]=((((x12)*(((((IkReal(-0.180000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(x16)*(x54)))))))+(((IkReal(0.490000000000000))*(x30)))+(((x25)*(x30)))+(((x5)*(((((IkReal(0.420000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x17)*(x34)))))))+(((x13)*(((((x20)*(x30)))+(((x23)*(x47))))))));
eerot[3]=((((x11)*(((((IkReal(-1.00000000000000))*(x18)*(x44)))+(((IkReal(-1.00000000000000))*(x22)*(x57)))))))+(((x10)*(((((x36)*(x58)))+(((x28)*(x61))))))));
eerot[4]=((((x10)*(((((x57)*(x8)))+(((x44)*(x9)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x26)*(x58)))+(((IkReal(-1.00000000000000))*(x21)*(x61))))))));
eerot[5]=((((x13)*(x58)))+(((x12)*(((((IkReal(-1.00000000000000))*(x18)*(x55)))+(((IkReal(-1.00000000000000))*(x22)*(x44))))))));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x29)))+(((IkReal(-0.420000000000000))*(x27)))))))+(((x12)*(((((IkReal(-0.180000000000000))*(x52)))+(((IkReal(-1.00000000000000))*(x16)*(x55)))))))+(((IkReal(0.490000000000000))*(x32)))+(((x25)*(x32)))+(((x13)*(((((x20)*(x32)))+(((x23)*(x49))))))));
eerot[6]=((((x11)*(((((IkReal(-1.00000000000000))*(x22)*(x48)))+(x39)))))+(((x10)*(x62))));
eerot[7]=((((x11)*(x62)))+(((x10)*(((((IkReal(-1.00000000000000))*(x39)))+(((x48)*(x8))))))));
eerot[8]=((((x12)*(((((IkReal(-1.00000000000000))*(x18)*(x45)))+(x40)))))+(((x13)*(x46))));
eetrans[2]=((IkReal(0.410000000000000))+(((x1)*(x17)))+(((x13)*(((((x23)*(x35)))+(((x2)*(x20)))))))+(((x12)*(((((IkReal(0.180000000000000))*(x31)*(x7)))+(((IkReal(-1.00000000000000))*(x16)*(x45)))))))+(((IkReal(0.420000000000000))*(x35)*(x5)))+(((IkReal(0.490000000000000))*(x2))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij5[2], _nj5,_ij6[2], _nj6,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r00));
new_r01=r01;
new_r02=((IkReal(-1.00000000000000))*(r02));
new_px=((((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r10));
new_r11=r11;
new_r12=((IkReal(-1.00000000000000))*(r12));
new_py=((((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=((IkReal(-1.00000000000000))*(r20));
new_r21=r21;
new_r22=((IkReal(-1.00000000000000))*(r22));
new_pz=((IkReal(-0.410000000000000))+(pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.01190476190476))+(((IkReal(2.42954324586978))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( std::isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(2.33333333333333))*(cj3)))+(((IkReal(1.36111111111111))*((cj4)*(cj4))*((sj3)*(sj3))))+(((IkReal(1.36111111111111))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x64=((IkReal(-0.420000000000000))+(((IkReal(-0.490000000000000))*(cj3))));
if( IKabs(x64) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.490000000000000))*(cj4)*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x65=((IkReal(1.00000000000000))*(IKatan2(x64, ((IkReal(0.490000000000000))*(cj4)*(sj3)))));
if( ((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x66=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.240100000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30))));
j5array[0]=((x66)+(((IkReal(-1.00000000000000))*(x65))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x65)))+(((IkReal(-1.00000000000000))*(x66))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x67=((IkReal(100.000000000000))*(sj5));
gconst0=IKsign(((((x67)*((npx)*(npx))))+(((x67)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x68=((IkReal(2100.00000000000))*(sj5));
gconst1=IKsign(((((x68)*((npx)*(npx))))+(((x68)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x69=((IkReal(1.00000000000000))*(pp));
IkReal x70=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.490000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x69)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=x70;
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(-0.840000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x69))));
evalcond[4]=x70;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-100.000000000000))*((npy)*(npy))))+(((IkReal(-100.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x71=((IkReal(100.000000000000))*(sj4));
gconst3=IKsign(((((IkReal(-1.00000000000000))*(x71)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x71)*((npy)*(npy))))));
IkReal x72=((IkReal(1.00000000000000))*(sj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x72)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x72)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x73=((IkReal(1.00000000000000))*(pp));
IkReal x74=x70;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x73)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=x74;
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(-1.00000000000000))*(x73)))+(((IkReal(-0.840000000000000))*(npz))));
evalcond[4]=x74;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-100.000000000000))*((npy)*(npy))))+(((IkReal(-100.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x75=((gconst4)*(sj3));
if( IKabs(((IkReal(49.0000000000000))*(npy)*(x75))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-49.0000000000000))*(npx)*(x75))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(49.0000000000000))*(npy)*(x75)), ((IkReal(-49.0000000000000))*(npx)*(x75)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x76=IKcos(j6);
IkReal x77=IKsin(j6);
evalcond[0]=((((npx)*(x77)))+(((npy)*(x76))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x77)))+(((npx)*(x76)))+(((IkReal(-0.490000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x234=((IkReal(1.00000000000000))*(pp));
IkReal x235=x70;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x234)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=x235;
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(-0.840000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x234))));
evalcond[4]=x235;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(100.000000000000))*((npy)*(npy))))+(((IkReal(100.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x236=((gconst5)*(sj3));
if( IKabs(((IkReal(49.0000000000000))*(npy)*(x236))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-49.0000000000000))*(npx)*(x236))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(49.0000000000000))*(npy)*(x236)), ((IkReal(-49.0000000000000))*(npx)*(x236)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x237=IKcos(j6);
IkReal x238=IKsin(j6);
evalcond[0]=((((npx)*(x238)))+(((npy)*(x237))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x238)))+(((npx)*(x237)))+(((IkReal(0.490000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x239=(sj4)*(sj4);
IkReal x240=((IkReal(49.0000000000000))*(sj3)*(x239));
IkReal x241=((IkReal(49.0000000000000))*(cj4)*(sj3)*(sj4));
if( IKabs(((gconst3)*(((((npy)*(x241)))+(((npx)*(x240))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x241)))+(((npy)*(x240))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((npy)*(x241)))+(((npx)*(x240)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x241)))+(((npy)*(x240)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x242=IKcos(j6);
IkReal x243=IKsin(j6);
IkReal x244=((cj4)*(npy));
IkReal x245=((IkReal(0.490000000000000))*(sj3));
IkReal x246=((npy)*(sj4));
IkReal x247=((IkReal(1.00000000000000))*(x243));
IkReal x248=((npx)*(x243));
IkReal x249=((npx)*(x242));
evalcond[0]=((x248)+(((npy)*(x242)))+(((sj4)*(x245))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x247)))+(((IkReal(-1.00000000000000))*(cj4)*(x245)))+(x249));
evalcond[2]=((((cj4)*(x248)))+(((x242)*(x244)))+(((sj4)*(x249)))+(((IkReal(-1.00000000000000))*(x246)*(x247))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(sj4)*(x247)))+(((cj4)*(x249)))+(((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(x244)*(x247)))+(((IkReal(-1.00000000000000))*(x242)*(x246))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x250=((IkReal(49.0000000000000))*(cj4)*(sj3));
IkReal x251=((IkReal(49.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst2)*(((((npy)*(x250)))+(((npx)*(x251))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((npy)*(x251)))+(((IkReal(-1.00000000000000))*(npx)*(x250))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((npy)*(x250)))+(((npx)*(x251)))))), ((gconst2)*(((((npy)*(x251)))+(((IkReal(-1.00000000000000))*(npx)*(x250)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x252=IKcos(j6);
IkReal x253=IKsin(j6);
IkReal x254=((cj4)*(npy));
IkReal x255=((IkReal(0.490000000000000))*(sj3));
IkReal x256=((npy)*(sj4));
IkReal x257=((IkReal(1.00000000000000))*(x253));
IkReal x258=((npx)*(x253));
IkReal x259=((npx)*(x252));
evalcond[0]=((((sj4)*(x255)))+(((npy)*(x252)))+(x258));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x257)))+(((IkReal(-1.00000000000000))*(cj4)*(x255)))+(x259));
evalcond[2]=((((sj4)*(x259)))+(((IkReal(-1.00000000000000))*(x256)*(x257)))+(((x252)*(x254)))+(((cj4)*(x258))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x252)*(x256)))+(((IkReal(-1.00000000000000))*(npx)*(sj4)*(x257)))+(((IkReal(-1.00000000000000))*(x254)*(x257)))+(((cj4)*(x259)))+(((IkReal(-1.00000000000000))*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x260=((IkReal(1.00000000000000))*(pp));
IkReal x261=((IkReal(0.490000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x260)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=((IkReal(0.420000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x261));
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[4]=((IkReal(-0.420000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x261))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(100.000000000000))*((npy)*(npy))))+(((IkReal(100.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x262=((IkReal(100.000000000000))*(sj4));
gconst7=IKsign(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx))))));
dummyeval[0]=((((sj4)*((npx)*(npx))))+(((sj4)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x263=((IkReal(1.00000000000000))*(pp));
IkReal x264=((IkReal(0.490000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x263)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=((IkReal(0.420000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x264));
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x263))));
evalcond[4]=((IkReal(-0.420000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x264))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(100.000000000000))*((npy)*(npy))))+(((IkReal(100.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x265=((gconst8)*(sj3));
if( IKabs(((IkReal(49.0000000000000))*(npy)*(x265))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-49.0000000000000))*(npx)*(x265))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(49.0000000000000))*(npy)*(x265)), ((IkReal(-49.0000000000000))*(npx)*(x265)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x266=IKcos(j6);
IkReal x267=IKsin(j6);
evalcond[0]=((((npx)*(x267)))+(((npy)*(x266))));
evalcond[1]=((((npx)*(x266)))+(((IkReal(-1.00000000000000))*(npy)*(x267)))+(((IkReal(0.490000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x268=((IkReal(1.00000000000000))*(pp));
IkReal x269=((IkReal(0.490000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.416500000000000))+(((IkReal(-1.00000000000000))*(x268)))+(((IkReal(0.411600000000000))*(cj3))));
evalcond[2]=((IkReal(0.420000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x269));
evalcond[3]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[4]=((IkReal(-0.420000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x269))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-100.000000000000))*((npy)*(npy))))+(((IkReal(-100.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x270=((gconst9)*(sj3));
if( IKabs(((IkReal(49.0000000000000))*(npy)*(x270))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-49.0000000000000))*(npx)*(x270))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(49.0000000000000))*(npy)*(x270)), ((IkReal(-49.0000000000000))*(npx)*(x270)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x271=IKcos(j6);
IkReal x272=IKsin(j6);
evalcond[0]=((((npy)*(x271)))+(((npx)*(x272))));
evalcond[1]=((((IkReal(-0.490000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x272)))+(((npx)*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x273=(sj4)*(sj4);
IkReal x274=((cj4)*(sj4));
IkReal x275=((IkReal(49.0000000000000))*(npx)*(sj3));
IkReal x276=((IkReal(49.0000000000000))*(npy)*(sj3));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(x273)*(x275)))+(((x274)*(x276))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(x273)*(x276)))+(((IkReal(-1.00000000000000))*(x274)*(x275))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(x273)*(x275)))+(((x274)*(x276)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(x273)*(x276)))+(((IkReal(-1.00000000000000))*(x274)*(x275)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x277=IKcos(j6);
IkReal x278=IKsin(j6);
IkReal x279=((IkReal(1.00000000000000))*(sj4));
IkReal x280=((IkReal(0.490000000000000))*(sj3));
IkReal x281=((npy)*(x277));
IkReal x282=((npx)*(x277));
IkReal x283=((npx)*(x278));
IkReal x284=((npy)*(x278));
evalcond[0]=((x283)+(x281)+(((sj4)*(x280))));
evalcond[1]=((x282)+(((IkReal(-1.00000000000000))*(x284)))+(((cj4)*(x280))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x279)*(x282)))+(((cj4)*(x283)))+(((cj4)*(x281)))+(((sj4)*(x284))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x282)))+(((IkReal(-1.00000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x279)*(x281)))+(((IkReal(-1.00000000000000))*(x279)*(x283)))+(((cj4)*(x284))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x285=((IkReal(49.0000000000000))*(cj4)*(sj3));
IkReal x286=((IkReal(49.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x286)))+(((npy)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x286)))+(((IkReal(-1.00000000000000))*(npx)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x286)))+(((npy)*(x285)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x286)))+(((IkReal(-1.00000000000000))*(npx)*(x285)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x287=IKcos(j6);
IkReal x288=IKsin(j6);
IkReal x289=((IkReal(1.00000000000000))*(sj4));
IkReal x290=((IkReal(0.490000000000000))*(sj3));
IkReal x291=((npy)*(x287));
IkReal x292=((npx)*(x287));
IkReal x293=((npx)*(x288));
IkReal x294=((npy)*(x288));
evalcond[0]=((((sj4)*(x290)))+(x291)+(x293));
evalcond[1]=((((IkReal(-1.00000000000000))*(x294)))+(((cj4)*(x290)))+(x292));
evalcond[2]=((((IkReal(-1.00000000000000))*(x289)*(x292)))+(((cj4)*(x291)))+(((cj4)*(x293)))+(((sj4)*(x294))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x292)))+(((IkReal(-1.00000000000000))*(x289)*(x293)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(((IkReal(-1.00000000000000))*(x290)))+(((cj4)*(x294))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x295=((IkReal(2500.00000000000))*(pp));
IkReal x296=((IkReal(2100.00000000000))*(cj5)*(npz));
IkReal x297=((IkReal(1029.00000000000))*(sj3)*(sj4)*(sj5));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x295)))+(((IkReal(-1.00000000000000))*(npy)*(x296)))+(((IkReal(-1.00000000000000))*(npx)*(x297)))+(((IkReal(159.250000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x297)))+(((npx)*(x295)))+(((npx)*(x296)))+(((IkReal(-159.250000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x295)))+(((IkReal(-1.00000000000000))*(npy)*(x296)))+(((IkReal(-1.00000000000000))*(npx)*(x297)))+(((IkReal(159.250000000000))*(npy)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x297)))+(((npx)*(x295)))+(((npx)*(x296)))+(((IkReal(-159.250000000000))*(npx)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x298=IKcos(j6);
IkReal x299=IKsin(j6);
IkReal x300=((IkReal(1.00000000000000))*(sj4));
IkReal x301=((cj5)*(npz));
IkReal x302=((cj4)*(cj5));
IkReal x303=((IkReal(0.490000000000000))*(sj3));
IkReal x304=((IkReal(0.490000000000000))*(cj3));
IkReal x305=((IkReal(0.840000000000000))*(sj5));
IkReal x306=((npz)*(sj5));
IkReal x307=((npy)*(x298));
IkReal x308=((npx)*(x298));
IkReal x309=((npy)*(x299));
IkReal x310=((npx)*(x299));
evalcond[0]=((x307)+(x310)+(((sj4)*(x303))));
evalcond[1]=((IkReal(0.0637000000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x305)*(x309)))+(((x305)*(x308)))+(((IkReal(-0.840000000000000))*(x301))));
evalcond[2]=((IkReal(-0.420000000000000))+(((sj5)*(x308)))+(((IkReal(-1.00000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(sj5)*(x309)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[3]=((((IkReal(-0.420000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(x309)))+(x308)+(((IkReal(-1.00000000000000))*(sj5)*(x304))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x300)*(x309)))+(((cj5)*(sj4)*(x308)))+(((cj4)*(x310)))+(((sj4)*(x306)))+(((cj4)*(x307))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x302)*(x309)))+(((IkReal(-1.00000000000000))*(x300)*(x310)))+(((x302)*(x308)))+(((IkReal(-1.00000000000000))*(x300)*(x307)))+(((cj4)*(x306)))+(((IkReal(-1.00000000000000))*(x303))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x311=((IkReal(49.0000000000000))*(npx));
IkReal x312=((IkReal(49.0000000000000))*(npy));
IkReal x313=((sj3)*(sj4)*(sj5));
IkReal x314=((IkReal(100.000000000000))*(cj5)*(npz));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(npy)*(x314)))+(((IkReal(-1.00000000000000))*(x311)*(x313)))+(((IkReal(-1.00000000000000))*(cj3)*(x312)))+(((IkReal(-42.0000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(x312)*(x313)))+(((npx)*(x314)))+(((cj3)*(x311)))+(((IkReal(42.0000000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(npy)*(x314)))+(((IkReal(-1.00000000000000))*(x311)*(x313)))+(((IkReal(-1.00000000000000))*(cj3)*(x312)))+(((IkReal(-42.0000000000000))*(npy)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(x312)*(x313)))+(((npx)*(x314)))+(((cj3)*(x311)))+(((IkReal(42.0000000000000))*(npx)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x315=IKcos(j6);
IkReal x316=IKsin(j6);
IkReal x317=((IkReal(1.00000000000000))*(sj4));
IkReal x318=((cj5)*(npz));
IkReal x319=((cj4)*(cj5));
IkReal x320=((IkReal(0.490000000000000))*(sj3));
IkReal x321=((IkReal(0.490000000000000))*(cj3));
IkReal x322=((IkReal(0.840000000000000))*(sj5));
IkReal x323=((npz)*(sj5));
IkReal x324=((npy)*(x315));
IkReal x325=((npx)*(x315));
IkReal x326=((npy)*(x316));
IkReal x327=((npx)*(x316));
evalcond[0]=((((sj4)*(x320)))+(x324)+(x327));
evalcond[1]=((IkReal(0.0637000000000000))+(((x322)*(x325)))+(((IkReal(-0.840000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(x321)))+(((sj5)*(x325)))+(((IkReal(-1.00000000000000))*(sj5)*(x326)))+(((IkReal(-1.00000000000000))*(x318))));
evalcond[3]=((((IkReal(-0.420000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x326)))+(x325)+(((IkReal(-1.00000000000000))*(x319)*(x320)))+(((IkReal(-1.00000000000000))*(sj5)*(x321))));
evalcond[4]=((((cj5)*(sj4)*(x325)))+(((sj4)*(x323)))+(((IkReal(-1.00000000000000))*(cj5)*(x317)*(x326)))+(((cj4)*(x324)))+(((cj4)*(x327))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x317)*(x327)))+(((IkReal(-1.00000000000000))*(x317)*(x324)))+(((IkReal(-1.00000000000000))*(x320)))+(((cj4)*(x323)))+(((IkReal(-1.00000000000000))*(x319)*(x326)))+(((x319)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x328=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npx)*(npx))+((npy)*(npy)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x329=IKasin(((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30))));
j6array[0]=((((IkReal(-1.00000000000000))*(x328)))+(((IkReal(-1.00000000000000))*(x329))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x328)))+(x329));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x330=(npx)*(npx);
IkReal x331=(cj4)*(cj4);
IkReal x332=(sj4)*(sj4);
IkReal x333=IKcos(j6);
IkReal x334=(npy)*(npy);
IkReal x335=IKsin(j6);
IkReal x336=((npx)*(npy));
IkReal x337=((IkReal(0.490000000000000))*(sj3)*(sj4));
IkReal x338=((IkReal(1.00000000000000))*(x334));
evalcond[0]=((((x333)*(((((x331)*(x336)))+(((x332)*(x336)))))))+(((x335)*(((((x330)*(x331)))+(((x330)*(x332)))))))+(((npx)*(x337))));
evalcond[1]=((((x335)*(((((IkReal(-1.00000000000000))*(x332)*(x336)))+(((IkReal(-1.00000000000000))*(x331)*(x336)))))))+(((x333)*(((((IkReal(-1.00000000000000))*(x331)*(x338)))+(((IkReal(-1.00000000000000))*(x332)*(x338)))))))+(((IkReal(-1.00000000000000))*(npy)*(x337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
IkReal x339=((cj6)*(npx));
IkReal x340=((IkReal(49.0000000000000))*(cj3));
IkReal x341=((npy)*(sj6));
gconst10=IKsign(((((IkReal(-42.0000000000000))*(x339)))+(((IkReal(49.0000000000000))*(cj4)*(npz)*(sj3)))+(((x340)*(x341)))+(((IkReal(42.0000000000000))*(x341)))+(((IkReal(-1.00000000000000))*(x339)*(x340)))));
IkReal x342=((npy)*(sj6));
IkReal x343=((cj6)*(npx));
IkReal x344=((IkReal(1.16666666666667))*(cj3));
dummyeval[0]=((((IkReal(1.16666666666667))*(cj4)*(npz)*(sj3)))+(x342)+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((IkReal(-1.00000000000000))*(x343)))+(((x342)*(x344))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x345=((npy)*(sj6));
IkReal x346=((IkReal(1029.00000000000))*(cj3));
IkReal x347=((cj6)*(npx));
gconst11=IKsign(((((x345)*(x346)))+(((IkReal(1029.00000000000))*(cj4)*(npz)*(sj3)))+(((IkReal(-1.00000000000000))*(x346)*(x347)))+(((IkReal(-882.000000000000))*(x347)))+(((IkReal(882.000000000000))*(x345)))));
IkReal x348=((npy)*(sj6));
IkReal x349=((cj6)*(npx));
IkReal x350=((IkReal(1.16666666666667))*(cj3));
dummyeval[0]=((((IkReal(1.16666666666667))*(cj4)*(npz)*(sj3)))+(((IkReal(-1.00000000000000))*(x349)*(x350)))+(x348)+(((x348)*(x350)))+(((IkReal(-1.00000000000000))*(x349))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x351=((cj4)*(sj3));
IkReal x352=((IkReal(1225.00000000000))*(pp));
IkReal x353=((IkReal(2100.00000000000))*(npz));
if( IKabs(((gconst11)*(((IkReal(66.8850000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x352)))+(((IkReal(-1050.00000000000))*(pp)))+(((IkReal(78.0325000000000))*(cj3)))+(((npz)*(x353))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(78.0325000000000))*(x351)))+(((cj6)*(npx)*(x353)))+(((IkReal(-1.00000000000000))*(x351)*(x352)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x353))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst11)*(((IkReal(66.8850000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x352)))+(((IkReal(-1050.00000000000))*(pp)))+(((IkReal(78.0325000000000))*(cj3)))+(((npz)*(x353)))))), ((gconst11)*(((((IkReal(78.0325000000000))*(x351)))+(((cj6)*(npx)*(x353)))+(((IkReal(-1.00000000000000))*(x351)*(x352)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x353)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x354=IKcos(j5);
IkReal x355=IKsin(j5);
IkReal x356=((IkReal(1.00000000000000))*(npy));
IkReal x357=((cj6)*(sj4));
IkReal x358=((IkReal(0.490000000000000))*(sj3));
IkReal x359=((sj4)*(sj6));
IkReal x360=((IkReal(1.00000000000000))*(npz));
IkReal x361=((cj6)*(npx));
IkReal x362=((IkReal(0.490000000000000))*(cj3));
IkReal x363=((npz)*(x355));
IkReal x364=((cj4)*(x354));
IkReal x365=((sj6)*(x355));
evalcond[0]=((((IkReal(-1.00000000000000))*(x354)*(x362)))+(((IkReal(-0.420000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(x360)))+(((cj4)*(x355)*(x358))));
evalcond[1]=((IkReal(0.0637000000000000))+(((IkReal(-0.840000000000000))*(npz)*(x354)))+(((IkReal(0.840000000000000))*(x355)*(x361)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.840000000000000))*(npy)*(x365))));
evalcond[2]=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(x354)*(x360)))+(((IkReal(-1.00000000000000))*(x362)))+(((x355)*(x361)))+(((IkReal(-1.00000000000000))*(x356)*(x365))));
evalcond[3]=((((IkReal(-0.420000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(x358)*(x364)))+(((IkReal(-1.00000000000000))*(x355)*(x362)))+(x361)+(((IkReal(-1.00000000000000))*(sj6)*(x356))));
evalcond[4]=((((sj4)*(x363)))+(((npx)*(x354)*(x357)))+(((cj4)*(npx)*(sj6)))+(((cj4)*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(x354)*(x356)*(x359))));
evalcond[5]=((((x361)*(x364)))+(((IkReal(-1.00000000000000))*(x358)))+(((IkReal(-1.00000000000000))*(x356)*(x357)))+(((cj4)*(x363)))+(((IkReal(-1.00000000000000))*(npx)*(x359)))+(((IkReal(-1.00000000000000))*(sj6)*(x356)*(x364))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x366=((cj4)*(sj3));
IkReal x367=((IkReal(100.000000000000))*(npz));
if( IKabs(((gconst10)*(((IkReal(-17.6400000000000))+(((IkReal(-41.1600000000000))*(cj3)))+(((npz)*(x367)))+(((IkReal(-24.0100000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-20.5800000000000))*(x366)))+(((cj6)*(npx)*(x367)))+(((IkReal(-24.0100000000000))*(cj3)*(x366)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x367))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((IkReal(-17.6400000000000))+(((IkReal(-41.1600000000000))*(cj3)))+(((npz)*(x367)))+(((IkReal(-24.0100000000000))*((cj3)*(cj3))))))), ((gconst10)*(((((IkReal(-20.5800000000000))*(x366)))+(((cj6)*(npx)*(x367)))+(((IkReal(-24.0100000000000))*(cj3)*(x366)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x367)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x368=IKcos(j5);
IkReal x369=IKsin(j5);
IkReal x370=((IkReal(1.00000000000000))*(npy));
IkReal x371=((cj6)*(sj4));
IkReal x372=((IkReal(0.490000000000000))*(sj3));
IkReal x373=((sj4)*(sj6));
IkReal x374=((IkReal(1.00000000000000))*(npz));
IkReal x375=((cj6)*(npx));
IkReal x376=((IkReal(0.490000000000000))*(cj3));
IkReal x377=((npz)*(x369));
IkReal x378=((cj4)*(x368));
IkReal x379=((sj6)*(x369));
evalcond[0]=((((IkReal(-1.00000000000000))*(x368)*(x376)))+(((cj4)*(x369)*(x372)))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-0.420000000000000))*(x368))));
evalcond[1]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(x369)*(x375)))+(((IkReal(-0.840000000000000))*(npz)*(x368)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.840000000000000))*(npy)*(x379))));
evalcond[2]=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(x368)*(x374)))+(((IkReal(-1.00000000000000))*(x370)*(x379)))+(((x369)*(x375)))+(((IkReal(-1.00000000000000))*(x376))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x372)*(x378)))+(x375)+(((IkReal(-0.420000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(sj6)*(x370)))+(((IkReal(-1.00000000000000))*(x369)*(x376))));
evalcond[4]=((((sj4)*(x377)))+(((IkReal(-1.00000000000000))*(x368)*(x370)*(x373)))+(((cj4)*(npx)*(sj6)))+(((cj4)*(cj6)*(npy)))+(((npx)*(x368)*(x371))));
evalcond[5]=((((IkReal(-1.00000000000000))*(npx)*(x373)))+(((x375)*(x378)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((IkReal(-1.00000000000000))*(x372)))+(((cj4)*(x377)))+(((IkReal(-1.00000000000000))*(sj6)*(x370)*(x378))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x380=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npx)*(npx))+((npy)*(npy)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x381=IKasin(((IkReal(0.490000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30))));
j6array[0]=((((IkReal(-1.00000000000000))*(x381)))+(((IkReal(-1.00000000000000))*(x380))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(x381)+(((IkReal(-1.00000000000000))*(x380))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[1];
IkReal gconst10;
IkReal x382=((cj6)*(npx));
IkReal x383=((IkReal(49.0000000000000))*(cj3));
IkReal x384=((npy)*(sj6));
gconst10=IKsign(((((IkReal(-42.0000000000000))*(x382)))+(((IkReal(42.0000000000000))*(x384)))+(((x383)*(x384)))+(((IkReal(49.0000000000000))*(cj4)*(npz)*(sj3)))+(((IkReal(-1.00000000000000))*(x382)*(x383)))));
IkReal x385=((npy)*(sj6));
IkReal x386=((cj6)*(npx));
IkReal x387=((IkReal(1.16666666666667))*(cj3));
dummyeval[0]=((((IkReal(1.16666666666667))*(cj4)*(npz)*(sj3)))+(x385)+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(((x385)*(x387))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x388=((npy)*(sj6));
IkReal x389=((IkReal(1029.00000000000))*(cj3));
IkReal x390=((cj6)*(npx));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(x389)*(x390)))+(((IkReal(-882.000000000000))*(x390)))+(((x388)*(x389)))+(((IkReal(1029.00000000000))*(cj4)*(npz)*(sj3)))+(((IkReal(882.000000000000))*(x388)))));
IkReal x391=((npy)*(sj6));
IkReal x392=((cj6)*(npx));
IkReal x393=((IkReal(1.16666666666667))*(cj3));
dummyeval[0]=((((IkReal(1.16666666666667))*(cj4)*(npz)*(sj3)))+(((IkReal(-1.00000000000000))*(x392)))+(x391)+(((x391)*(x393)))+(((IkReal(-1.00000000000000))*(x392)*(x393))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x394=((cj4)*(sj3));
IkReal x395=((IkReal(1225.00000000000))*(pp));
IkReal x396=((IkReal(2100.00000000000))*(npz));
if( IKabs(((gconst11)*(((IkReal(66.8850000000000))+(((npz)*(x396)))+(((IkReal(-1050.00000000000))*(pp)))+(((IkReal(-1.00000000000000))*(cj3)*(x395)))+(((IkReal(78.0325000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((cj6)*(npx)*(x396)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(78.0325000000000))*(x394)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x396))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst11)*(((IkReal(66.8850000000000))+(((npz)*(x396)))+(((IkReal(-1050.00000000000))*(pp)))+(((IkReal(-1.00000000000000))*(cj3)*(x395)))+(((IkReal(78.0325000000000))*(cj3)))))), ((gconst11)*(((((cj6)*(npx)*(x396)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(78.0325000000000))*(x394)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x396)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x397=IKcos(j5);
IkReal x398=IKsin(j5);
IkReal x399=((IkReal(1.00000000000000))*(npy));
IkReal x400=((cj6)*(sj4));
IkReal x401=((IkReal(0.490000000000000))*(sj3));
IkReal x402=((sj4)*(sj6));
IkReal x403=((IkReal(1.00000000000000))*(npz));
IkReal x404=((cj6)*(npx));
IkReal x405=((IkReal(0.490000000000000))*(cj3));
IkReal x406=((npz)*(x398));
IkReal x407=((cj4)*(x397));
IkReal x408=((sj6)*(x398));
evalcond[0]=((((cj4)*(x398)*(x401)))+(((IkReal(-1.00000000000000))*(x397)*(x405)))+(((IkReal(-0.420000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(x403))));
evalcond[1]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.840000000000000))*(npy)*(x408)))+(((IkReal(-0.840000000000000))*(npz)*(x397))));
evalcond[2]=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(x399)*(x408)))+(((IkReal(-1.00000000000000))*(x397)*(x403)))+(((x398)*(x404)))+(((IkReal(-1.00000000000000))*(x405))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x401)*(x407)))+(((IkReal(-1.00000000000000))*(sj6)*(x399)))+(x404)+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-0.420000000000000))*(x398))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x397)*(x399)*(x402)))+(((npx)*(x397)*(x400)))+(((cj4)*(npx)*(sj6)))+(((cj4)*(cj6)*(npy)))+(((sj4)*(x406))));
evalcond[5]=((((x404)*(x407)))+(((IkReal(-1.00000000000000))*(sj6)*(x399)*(x407)))+(((cj4)*(x406)))+(((IkReal(-1.00000000000000))*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(npx)*(x402)))+(((IkReal(-1.00000000000000))*(x401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x409=((cj4)*(sj3));
IkReal x410=((IkReal(100.000000000000))*(npz));
if( IKabs(((gconst10)*(((IkReal(-17.6400000000000))+(((IkReal(-41.1600000000000))*(cj3)))+(((npz)*(x410)))+(((IkReal(-24.0100000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x410)))+(((cj6)*(npx)*(x410)))+(((IkReal(-24.0100000000000))*(cj3)*(x409)))+(((IkReal(-20.5800000000000))*(x409))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((IkReal(-17.6400000000000))+(((IkReal(-41.1600000000000))*(cj3)))+(((npz)*(x410)))+(((IkReal(-24.0100000000000))*((cj3)*(cj3))))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x410)))+(((cj6)*(npx)*(x410)))+(((IkReal(-24.0100000000000))*(cj3)*(x409)))+(((IkReal(-20.5800000000000))*(x409)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x411=IKcos(j5);
IkReal x412=IKsin(j5);
IkReal x413=((IkReal(1.00000000000000))*(npy));
IkReal x414=((cj6)*(sj4));
IkReal x415=((IkReal(0.490000000000000))*(sj3));
IkReal x416=((sj4)*(sj6));
IkReal x417=((IkReal(1.00000000000000))*(npz));
IkReal x418=((cj6)*(npx));
IkReal x419=((IkReal(0.490000000000000))*(cj3));
IkReal x420=((npz)*(x412));
IkReal x421=((cj4)*(x411));
IkReal x422=((sj6)*(x412));
evalcond[0]=((((cj4)*(x412)*(x415)))+(((IkReal(-0.420000000000000))*(x411)))+(((IkReal(-1.00000000000000))*(x411)*(x419)))+(((IkReal(-1.00000000000000))*(x417))));
evalcond[1]=((IkReal(0.0637000000000000))+(((IkReal(0.840000000000000))*(x412)*(x418)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.840000000000000))*(npy)*(x422)))+(((IkReal(-0.840000000000000))*(npz)*(x411))));
evalcond[2]=((IkReal(-0.420000000000000))+(((IkReal(-1.00000000000000))*(x411)*(x417)))+(((x412)*(x418)))+(((IkReal(-1.00000000000000))*(x413)*(x422)))+(((IkReal(-1.00000000000000))*(x419))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x413)))+(((IkReal(-1.00000000000000))*(x412)*(x419)))+(((IkReal(-0.420000000000000))*(x412)))+(x418)+(((IkReal(-1.00000000000000))*(x415)*(x421))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x411)*(x413)*(x416)))+(((npx)*(x411)*(x414)))+(((sj4)*(x420)))+(((cj4)*(npx)*(sj6)))+(((cj4)*(cj6)*(npy))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj6)*(x413)*(x421)))+(((x418)*(x421)))+(((cj4)*(x420)))+(((IkReal(-1.00000000000000))*(x413)*(x414)))+(((IkReal(-1.00000000000000))*(npx)*(x416)))+(((IkReal(-1.00000000000000))*(x415))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x78=((cj6)*(sj4));
IkReal x79=((IkReal(1.00000000000000))*(sj5));
IkReal x80=((cj4)*(cj5));
IkReal x81=((IkReal(1.00000000000000))*(sj3));
IkReal x82=((cj3)*(sj5));
IkReal x83=((IkReal(1.00000000000000))*(sj6));
IkReal x84=((sj4)*(sj6));
IkReal x85=((IkReal(1.00000000000000))*(cj3));
IkReal x86=((IkReal(-1.00000000000000))*(cj3));
IkReal x87=((((cj3)*(x80)))+(((IkReal(-1.00000000000000))*(sj3)*(x79))));
IkReal x88=((((cj5)*(sj3)))+(((cj4)*(x82))));
IkReal x89=((((cj5)*(x84)))+(((IkReal(-1.00000000000000))*(cj4)*(cj6))));
IkReal x90=((x82)+(((sj3)*(x80))));
IkReal x91=((((cj4)*(sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x85))));
IkReal x92=((cj6)*(x87));
IkReal x93=((((IkReal(-1.00000000000000))*(cj4)*(x83)))+(((IkReal(-1.00000000000000))*(cj5)*(x78))));
IkReal x94=((((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x83)))+(x92));
IkReal x95=((((IkReal(-1.00000000000000))*(x81)*(x84)))+(((cj6)*(x90))));
IkReal x96=((((IkReal(-1.00000000000000))*(x83)*(x90)))+(((IkReal(-1.00000000000000))*(x78)*(x81))));
IkReal x97=((((x78)*(x86)))+(((IkReal(-1.00000000000000))*(sj6)*(x87))));
new_r00=((((r00)*(((((x84)*(x86)))+(x92)))))+(((r01)*(((((IkReal(-1.00000000000000))*(x83)*(x87)))+(((IkReal(-1.00000000000000))*(x78)*(x85)))))))+(((r02)*(x88))));
new_r01=((((r12)*(x88)))+(((r11)*(x97)))+(((r10)*(x94))));
new_r02=((((r21)*(x97)))+(((r20)*(x94)))+(((r22)*(x88))));
new_r10=((((r00)*(x93)))+(((r01)*(x89)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x79))));
new_r11=((((r11)*(x89)))+(((r10)*(x93)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x79))));
new_r12=((((r21)*(x89)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)*(x79)))+(((r20)*(x93))));
new_r20=((((r01)*(x96)))+(((r00)*(x95)))+(((r02)*(x91))));
new_r21=((((r12)*(x91)))+(((r11)*(x96)))+(((r10)*(x95))));
new_r22=((((r21)*(x96)))+(((r20)*(x95)))+(((r22)*(x91))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( std::isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r21, new_r20);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j0))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j0))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x98=((gconst20)*(sj0));
if( IKabs(((new_r12)*(x98))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x98))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x98)), ((IkReal(-1.00000000000000))*(new_r02)*(x98)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x99=IKsin(j2);
IkReal x100=IKcos(j2);
IkReal x101=((IkReal(1.00000000000000))*(x99));
evalcond[0]=((((new_r02)*(x99)))+(((new_r12)*(x100))));
evalcond[1]=((((new_r10)*(x100)))+(sj0)+(((new_r00)*(x99))));
evalcond[2]=((IkReal(1.00000000000000))+(((new_r02)*(x100)))+(((IkReal(-1.00000000000000))*(new_r12)*(x101))));
evalcond[3]=((((new_r01)*(x99)))+(((IkReal(-1.00000000000000))*(cj0)))+(((new_r11)*(x100))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x101)))+(((new_r00)*(x100))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x101)))+(((new_r01)*(x100))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst21)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst21)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst21)*(new_r12)), ((IkReal(-1.00000000000000))*(gconst21)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x102=IKsin(j2);
IkReal x103=IKcos(j2);
IkReal x104=((IkReal(1.00000000000000))*(x102));
evalcond[0]=((((new_r02)*(x102)))+(((new_r12)*(x103))));
evalcond[1]=((((new_r10)*(x103)))+(sj0)+(((new_r00)*(x102))));
evalcond[2]=((IkReal(1.00000000000000))+(((new_r02)*(x103)))+(((IkReal(-1.00000000000000))*(new_r12)*(x104))));
evalcond[3]=((((new_r01)*(x102)))+(((IkReal(-1.00000000000000))*(cj0)))+(((new_r11)*(x103))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x104)))+(((new_r00)*(x103))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x104)))+(((new_r01)*(x103))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), ((IkReal(-1.00000000000000))*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j0))+(new_r20));
evalcond[1]=((IKsin(j0))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r12)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x105=IKsin(j2);
IkReal x106=IKcos(j2);
IkReal x107=((IkReal(1.00000000000000))*(x105));
evalcond[0]=((((new_r02)*(x105)))+(((new_r12)*(x106))));
evalcond[1]=((((new_r10)*(x106)))+(sj0)+(((new_r00)*(x105))));
evalcond[2]=((IkReal(-1.00000000000000))+(((new_r02)*(x106)))+(((IkReal(-1.00000000000000))*(new_r12)*(x107))));
evalcond[3]=((((new_r01)*(x105)))+(((IkReal(-1.00000000000000))*(cj0)))+(((new_r11)*(x106))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x107)))+(((new_r00)*(x106))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x107)))+(((new_r01)*(x106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x108=((gconst24)*(sj0));
if( IKabs(((new_r12)*(x108))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x108))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x108)), ((IkReal(-1.00000000000000))*(new_r02)*(x108)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x109=IKsin(j2);
IkReal x110=IKcos(j2);
IkReal x111=((IkReal(1.00000000000000))*(x109));
evalcond[0]=((((new_r02)*(x109)))+(((new_r12)*(x110))));
evalcond[1]=((((new_r10)*(x110)))+(sj0)+(((new_r00)*(x109))));
evalcond[2]=((IkReal(-1.00000000000000))+(((new_r02)*(x110)))+(((IkReal(-1.00000000000000))*(new_r12)*(x111))));
evalcond[3]=((((new_r11)*(x110)))+(((new_r01)*(x109)))+(((IkReal(-1.00000000000000))*(cj0))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x111)))+(((new_r00)*(x110))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x111)))+(((new_r01)*(x110))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x112=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x112));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x112))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x113=IKsin(j0);
IkReal x114=((IkReal(1.00000000000000))*(sj2));
IkReal x115=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x113)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x115)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x114)))+(((IkReal(-1.00000000000000))*(x115)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x114)))+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x116=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x116;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x116;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x117=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x117));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x117))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x118=IKcos(j0);
IkReal x119=IKsin(j0);
IkReal x120=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x119)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x118))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x120)))+(x118)+(((cj2)*(new_r00))));
evalcond[3]=((x119)+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x121=((gconst14)*(new_r22)*(sj1));
if( IKabs(((new_r12)*(x121))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x121))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x121)), ((IkReal(-1.00000000000000))*(new_r02)*(x121)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x122=IKcos(j2);
IkReal x123=IKsin(j2);
IkReal x124=((IkReal(1.00000000000000))*(cj1));
IkReal x125=((sj1)*(x122));
IkReal x126=((new_r12)*(x123));
IkReal x127=((new_r02)*(x122));
IkReal x128=((IkReal(1.00000000000000))*(sj1)*(x123));
evalcond[0]=((((new_r02)*(x123)))+(((new_r12)*(x122))));
evalcond[1]=((sj1)+(x127)+(((IkReal(-1.00000000000000))*(x126))));
evalcond[2]=((((cj1)*(x127)))+(((IkReal(-1.00000000000000))*(x124)*(x126)))+(((new_r22)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x128)))+(((new_r00)*(x125)))+(((IkReal(-1.00000000000000))*(new_r20)*(x124))));
evalcond[4]=((((new_r01)*(x125)))+(((IkReal(-1.00000000000000))*(new_r21)*(x124)))+(((IkReal(-1.00000000000000))*(new_r11)*(x128))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x126)))+(((new_r02)*(x125)))+(((IkReal(-1.00000000000000))*(new_r22)*(x124))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x129=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
IkReal x130=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x129;
evalcond[5]=x129;
evalcond[6]=x130;
evalcond[7]=x130;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x131=IKsin(j0);
IkReal x132=((IkReal(1.00000000000000))*(sj2));
IkReal x133=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x131)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x133)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x132)))+(((IkReal(-1.00000000000000))*(x133)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x132)))+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x134=((IkReal(1.00000000000000))+(new_r22));
IkReal x135=((new_r12)*(sj2));
IkReal x136=((cj2)*(new_r02));
IkReal x137=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x134;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x137;
evalcond[5]=x137;
evalcond[6]=((x136)+(((IkReal(-1.00000000000000))*(x135))));
evalcond[7]=((x135)+(((IkReal(-1.00000000000000))*(x136))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x134;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x138=IKcos(j0);
IkReal x139=IKsin(j0);
IkReal x140=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x139)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x138))));
evalcond[2]=((x138)+(((IkReal(-1.00000000000000))*(new_r10)*(x140)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x140)))+(x139)+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x141=IKsin(j0);
IkReal x142=IKcos(j0);
IkReal x143=((cj2)*(new_r01));
IkReal x144=((IkReal(1.00000000000000))*(cj1));
IkReal x145=((IkReal(1.00000000000000))*(sj1));
IkReal x146=((new_r10)*(sj2));
IkReal x147=((new_r11)*(sj2));
IkReal x148=((cj2)*(new_r00));
IkReal x149=((IkReal(1.00000000000000))*(x142));
evalcond[0]=((((IkReal(-1.00000000000000))*(x142)*(x145)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x141)*(x145)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x141)+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x142)*(x144)))+(x148)+(((IkReal(-1.00000000000000))*(x146))));
evalcond[5]=((x143)+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x141)*(x144))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x144)*(x146)))+(((cj1)*(x148))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x144)*(x147)))+(((IkReal(-1.00000000000000))*(x141)))+(((new_r21)*(sj1)))+(((cj1)*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x150=IKsin(j0);
IkReal x151=IKcos(j0);
IkReal x152=((cj2)*(new_r01));
IkReal x153=((IkReal(1.00000000000000))*(cj1));
IkReal x154=((IkReal(1.00000000000000))*(sj1));
IkReal x155=((new_r10)*(sj2));
IkReal x156=((new_r11)*(sj2));
IkReal x157=((cj2)*(new_r00));
IkReal x158=((IkReal(1.00000000000000))*(x151));
evalcond[0]=((((IkReal(-1.00000000000000))*(x151)*(x154)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x150)*(x154)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x150)+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x158)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x151)*(x153)))+(x157)+(((IkReal(-1.00000000000000))*(x155))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x150)*(x153)))+(x152)+(((IkReal(-1.00000000000000))*(x156))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x158)))+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x153)*(x155)))+(((cj1)*(x157))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x153)*(x156)))+(((IkReal(-1.00000000000000))*(x150)))+(((new_r21)*(sj1)))+(((cj1)*(x152))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst15)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(new_r21)), ((gconst15)*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x159=IKsin(j0);
IkReal x160=IKcos(j0);
IkReal x161=((cj2)*(new_r01));
IkReal x162=((IkReal(1.00000000000000))*(cj1));
IkReal x163=((IkReal(1.00000000000000))*(sj1));
IkReal x164=((new_r10)*(sj2));
IkReal x165=((new_r11)*(sj2));
IkReal x166=((cj2)*(new_r00));
IkReal x167=((IkReal(1.00000000000000))*(x160));
evalcond[0]=((((IkReal(-1.00000000000000))*(x160)*(x163)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x159)*(x163)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x159)+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x167)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x160)*(x162)))+(x166)+(((IkReal(-1.00000000000000))*(x164))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x159)*(x162)))+(x161)+(((IkReal(-1.00000000000000))*(x165))));
evalcond[6]=((((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x162)*(x164)))+(((cj1)*(x166))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x162)*(x165)))+(((IkReal(-1.00000000000000))*(x159)))+(((cj1)*(x161)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x168=((gconst13)*(sj1));
if( IKabs(((new_r12)*(x168))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x168))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x168)), ((IkReal(-1.00000000000000))*(new_r02)*(x168)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x169=IKcos(j2);
IkReal x170=IKsin(j2);
IkReal x171=((IkReal(1.00000000000000))*(cj1));
IkReal x172=((sj1)*(x169));
IkReal x173=((new_r12)*(x170));
IkReal x174=((new_r02)*(x169));
IkReal x175=((IkReal(1.00000000000000))*(sj1)*(x170));
evalcond[0]=((((new_r02)*(x170)))+(((new_r12)*(x169))));
evalcond[1]=((sj1)+(((IkReal(-1.00000000000000))*(x173)))+(x174));
evalcond[2]=((((new_r22)*(sj1)))+(((IkReal(-1.00000000000000))*(x171)*(x173)))+(((cj1)*(x174))));
evalcond[3]=((((new_r00)*(x172)))+(((IkReal(-1.00000000000000))*(new_r20)*(x171)))+(((IkReal(-1.00000000000000))*(new_r10)*(x175))));
evalcond[4]=((((new_r01)*(x172)))+(((IkReal(-1.00000000000000))*(new_r21)*(x171)))+(((IkReal(-1.00000000000000))*(new_r11)*(x175))));
evalcond[5]=((IkReal(1.00000000000000))+(((new_r02)*(x172)))+(((IkReal(-1.00000000000000))*(sj1)*(x173)))+(((IkReal(-1.00000000000000))*(new_r22)*(x171))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x176=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
IkReal x177=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x176;
evalcond[5]=x176;
evalcond[6]=x177;
evalcond[7]=x177;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x178=IKsin(j0);
IkReal x179=((IkReal(1.00000000000000))*(sj2));
IkReal x180=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x178)+(((cj2)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x179)))+(((IkReal(-1.00000000000000))*(x180)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r11)*(x179)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x181=((IkReal(1.00000000000000))+(new_r22));
IkReal x182=((new_r12)*(sj2));
IkReal x183=((cj2)*(new_r02));
IkReal x184=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x181;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x184;
evalcond[5]=x184;
evalcond[6]=((((IkReal(-1.00000000000000))*(x182)))+(x183));
evalcond[7]=((((IkReal(-1.00000000000000))*(x183)))+(x182));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x181;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x185=IKcos(j0);
IkReal x186=IKsin(j0);
IkReal x187=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x186)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x185)))+(((cj2)*(new_r11))));
evalcond[2]=((x185)+(((IkReal(-1.00000000000000))*(new_r10)*(x187)))+(((cj2)*(new_r00))));
evalcond[3]=((x186)+(((IkReal(-1.00000000000000))*(new_r11)*(x187)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x188=IKsin(j0);
IkReal x189=IKcos(j0);
IkReal x190=((cj2)*(new_r01));
IkReal x191=((IkReal(1.00000000000000))*(cj1));
IkReal x192=((IkReal(1.00000000000000))*(sj1));
IkReal x193=((new_r10)*(sj2));
IkReal x194=((new_r11)*(sj2));
IkReal x195=((cj2)*(new_r00));
IkReal x196=((IkReal(1.00000000000000))*(x189));
evalcond[0]=((((IkReal(-1.00000000000000))*(x189)*(x192)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x188)*(x192)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x188)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x196)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x189)*(x191)))+(((IkReal(-1.00000000000000))*(x193)))+(x195));
evalcond[5]=((((IkReal(-1.00000000000000))*(x188)*(x191)))+(((IkReal(-1.00000000000000))*(x194)))+(x190));
evalcond[6]=((((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x191)*(x193)))+(((IkReal(-1.00000000000000))*(x196)))+(((cj1)*(x195))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x191)*(x194)))+(((IkReal(-1.00000000000000))*(x188)))+(((cj1)*(x190)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x197=IKsin(j0);
IkReal x198=IKcos(j0);
IkReal x199=((cj2)*(new_r01));
IkReal x200=((IkReal(1.00000000000000))*(cj1));
IkReal x201=((IkReal(1.00000000000000))*(sj1));
IkReal x202=((new_r10)*(sj2));
IkReal x203=((new_r11)*(sj2));
IkReal x204=((cj2)*(new_r00));
IkReal x205=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((((IkReal(-1.00000000000000))*(x198)*(x201)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x197)*(x201)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x197)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x205)))+(((cj2)*(new_r11))));
evalcond[4]=((x204)+(((IkReal(-1.00000000000000))*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x202))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x197)*(x200)))+(x199)+(((IkReal(-1.00000000000000))*(x203))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x200)*(x202)))+(((cj1)*(x204)))+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x200)*(x203)))+(((IkReal(-1.00000000000000))*(x197)))+(((cj1)*(x199)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst15)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(new_r21)), ((gconst15)*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x206=IKsin(j0);
IkReal x207=IKcos(j0);
IkReal x208=((cj2)*(new_r01));
IkReal x209=((IkReal(1.00000000000000))*(cj1));
IkReal x210=((IkReal(1.00000000000000))*(sj1));
IkReal x211=((new_r10)*(sj2));
IkReal x212=((new_r11)*(sj2));
IkReal x213=((cj2)*(new_r00));
IkReal x214=((IkReal(1.00000000000000))*(x207));
evalcond[0]=((((IkReal(-1.00000000000000))*(x207)*(x210)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x206)*(x210)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x206)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x214))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x207)*(x209)))+(x213)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x206)*(x209)))+(x208)+(((IkReal(-1.00000000000000))*(x212))));
evalcond[6]=((((new_r20)*(sj1)))+(((cj1)*(x213)))+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(x209)*(x211))));
evalcond[7]=((((cj1)*(x208)))+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(x206)))+(((IkReal(-1.00000000000000))*(x209)*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst12)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(new_r21)), ((gconst12)*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x215=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x215)*(IKcos(j0)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x215)*(IKsin(j0))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x216=((gconst16)*(sj0));
if( IKabs(((new_r12)*(x216))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x216))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x216)), ((IkReal(-1.00000000000000))*(new_r02)*(x216)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x217=IKsin(j2);
IkReal x218=IKcos(j2);
IkReal x219=((IkReal(1.00000000000000))*(cj0));
IkReal x220=((IkReal(1.00000000000000))*(cj1));
IkReal x221=((IkReal(1.00000000000000))*(x217));
IkReal x222=((new_r01)*(x218));
IkReal x223=((new_r00)*(x218));
IkReal x224=((new_r02)*(x218));
evalcond[0]=((((new_r02)*(x217)))+(((new_r12)*(x218))));
evalcond[1]=((sj0)+(((new_r00)*(x217)))+(((new_r10)*(x218))));
evalcond[2]=((sj1)+(x224)+(((IkReal(-1.00000000000000))*(new_r12)*(x221))));
evalcond[3]=((((new_r01)*(x217)))+(((IkReal(-1.00000000000000))*(x219)))+(((new_r11)*(x218))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x219)))+(((IkReal(-1.00000000000000))*(new_r10)*(x221)))+(x223));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x221)))+(((IkReal(-1.00000000000000))*(sj0)*(x220)))+(x222));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r12)*(x217)*(x220)))+(((cj1)*(x224)))+(((new_r22)*(sj1))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(sj1)*(x221)))+(((sj1)*(x223)))+(((IkReal(-1.00000000000000))*(new_r20)*(x220))));
evalcond[8]=((((sj1)*(x222)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj1)*(x221)))+(((IkReal(-1.00000000000000))*(new_r21)*(x220))));
evalcond[9]=((IkReal(1.00000000000000))+(((sj1)*(x224)))+(((IkReal(-1.00000000000000))*(new_r22)*(x220)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj1)*(x221))));
evalcond[10]=((((new_r20)*(sj1)))+(((cj1)*(x223)))+(((IkReal(-1.00000000000000))*(new_r10)*(x217)*(x220)))+(((IkReal(-1.00000000000000))*(x219))));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj0)))+(((cj1)*(x222)))+(((IkReal(-1.00000000000000))*(new_r11)*(x217)*(x220)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x225=((gconst17)*(sj1));
if( IKabs(((new_r12)*(x225))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x225))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x225)), ((IkReal(-1.00000000000000))*(new_r02)*(x225)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x226=IKsin(j2);
IkReal x227=IKcos(j2);
IkReal x228=((IkReal(1.00000000000000))*(cj0));
IkReal x229=((IkReal(1.00000000000000))*(cj1));
IkReal x230=((IkReal(1.00000000000000))*(x226));
IkReal x231=((new_r01)*(x227));
IkReal x232=((new_r00)*(x227));
IkReal x233=((new_r02)*(x227));
evalcond[0]=((((new_r02)*(x226)))+(((new_r12)*(x227))));
evalcond[1]=((((new_r00)*(x226)))+(sj0)+(((new_r10)*(x227))));
evalcond[2]=((sj1)+(((IkReal(-1.00000000000000))*(new_r12)*(x230)))+(x233));
evalcond[3]=((((new_r01)*(x226)))+(((new_r11)*(x227)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[4]=((x232)+(((IkReal(-1.00000000000000))*(cj1)*(x228)))+(((IkReal(-1.00000000000000))*(new_r10)*(x230))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj0)*(x229)))+(x231)+(((IkReal(-1.00000000000000))*(new_r11)*(x230))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r12)*(x226)*(x229)))+(((cj1)*(x233)))+(((new_r22)*(sj1))));
evalcond[7]=((((sj1)*(x232)))+(((IkReal(-1.00000000000000))*(new_r20)*(x229)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)*(x230))));
evalcond[8]=((((sj1)*(x231)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj1)*(x230)))+(((IkReal(-1.00000000000000))*(new_r21)*(x229))));
evalcond[9]=((IkReal(1.00000000000000))+(((sj1)*(x233)))+(((IkReal(-1.00000000000000))*(new_r22)*(x229)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj1)*(x230))));
evalcond[10]=((((cj1)*(x232)))+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r10)*(x226)*(x229)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[11]=((((cj1)*(x231)))+(((IkReal(-1.00000000000000))*(sj0)))+(((IkReal(-1.00000000000000))*(new_r11)*(x226)*(x229)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - motoman_sia20d (72a5dabf099b6c11c75f8620052123af)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif


#endif //MOTOMAN_SIA20D_MANIPULATOR_IKFAST_SOLVER
