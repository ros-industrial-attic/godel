/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-05-20 14:56:16.030833
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[1]);
x7=IKcos(j[2]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((IkReal(0.208000000000000))*(x0));
x13=((IkReal(1.39500000000000))*(x0));
x14=((IkReal(0.208000000000000))*(x2));
x15=((IkReal(1.00000000000000))*(x10));
x16=((IkReal(0.200000000000000))*(x2));
x17=((IkReal(1.00000000000000))*(x2));
x18=((IkReal(1.07000000000000))*(x4));
x19=((IkReal(1.39500000000000))*(x2));
x20=((IkReal(1.00000000000000))*(x9));
x21=((IkReal(0.208000000000000))*(x1));
x22=((IkReal(0.200000000000000))*(x0));
x23=((IkReal(1.00000000000000))*(x0));
x24=((x6)*(x7));
x25=((x4)*(x5));
x26=((x5)*(x6));
x27=((x4)*(x7));
x28=((x1)*(x9));
x29=((IkReal(1.00000000000000))*(x24));
x30=((x23)*(x25));
x31=((x17)*(x25));
x32=((x25)+(((IkReal(-1.00000000000000))*(x29))));
x33=((x29)+(((IkReal(-1.00000000000000))*(x25))));
x34=((((IkReal(1.00000000000000))*(x26)))+(((IkReal(1.00000000000000))*(x27))));
x35=((x1)*(x32));
x36=((x3)*(x33));
x37=((x10)*(x35));
x38=((x30)+(((IkReal(-1.00000000000000))*(x23)*(x24))));
x39=((x31)+(((IkReal(-1.00000000000000))*(x17)*(x24))));
x40=((x23)*(((x26)+(x27))));
x41=((IkReal(-1.00000000000000))*(x40));
x42=((x17)*(((x26)+(x27))));
x43=((IkReal(-1.00000000000000))*(x42));
x44=((x1)*(x43));
x45=((((x1)*(x41)))+(((IkReal(-1.00000000000000))*(x17)*(x3))));
x46=((((IkReal(-1.00000000000000))*(x1)*(x17)))+(((x3)*(x40))));
x47=((((x3)*(x42)))+(((x0)*(x1))));
x48=((x44)+(((x0)*(x3))));
x49=((x10)*(x45));
eerot[0]=((((x46)*(x8)))+(((x11)*(((x49)+(((x38)*(x9))))))));
eerot[1]=((((x11)*(x46)))+(((x8)*(((((IkReal(-1.00000000000000))*(x15)*(x45)))+(((IkReal(-1.00000000000000))*(x20)*(x38))))))));
eerot[2]=((((x45)*(x9)))+(((x10)*(((((IkReal(-1.00000000000000))*(x30)))+(((x0)*(x24))))))));
IkReal x50=((IkReal(1.00000000000000))*(x25));
eetrans[0]=((((x22)*(x27)))+(((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x3)))+(((x21)*(x41)))))))+(((x0)*(x18)))+(((IkReal(-0.0110000000000000))*(x2)))+(((IkReal(0.322000000000000))*(x0)))+(((x10)*(((((x12)*(x24)))+(((IkReal(-1.00000000000000))*(x12)*(x50)))))))+(((IkReal(-1.00000000000000))*(x13)*(x50)))+(((x22)*(x26)))+(((x13)*(x24))));
eerot[3]=((((x47)*(x8)))+(((x11)*(((((x10)*(x48)))+(((x39)*(x9))))))));
eerot[4]=((((x8)*(((((IkReal(-1.00000000000000))*(x15)*(x48)))+(((IkReal(-1.00000000000000))*(x20)*(x39)))))))+(((x11)*(x47))));
eerot[5]=((((x10)*(((((x2)*(x24)))+(((IkReal(-1.00000000000000))*(x31)))))))+(((x48)*(x9))));
IkReal x51=((IkReal(1.00000000000000))*(x25));
eetrans[1]=((((IkReal(0.322000000000000))*(x2)))+(((x19)*(x24)))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x51)))+(((x14)*(x24)))))))+(((IkReal(-1.00000000000000))*(x19)*(x51)))+(((x18)*(x2)))+(((IkReal(0.0110000000000000))*(x0)))+(((x16)*(x27)))+(((x9)*(((((x12)*(x3)))+(((x21)*(x43)))))))+(((x16)*(x26))));
eerot[6]=((((x36)*(x8)))+(((x11)*(((((x34)*(x9)))+(x37))))));
eerot[7]=((((x8)*(((((IkReal(-1.00000000000000))*(x20)*(x34)))+(((IkReal(-1.00000000000000))*(x15)*(x35)))))))+(((x11)*(x36))));
eerot[8]=((((IkReal(-1.00000000000000))*(x10)*(x34)))+(((x28)*(x32))));
eetrans[2]=((IkReal(0.778000000000000))+(((x28)*(((((IkReal(0.208000000000000))*(x25)))+(((IkReal(-0.208000000000000))*(x24)))))))+(((IkReal(-0.200000000000000))*(x25)))+(((IkReal(-1.39500000000000))*(x26)))+(((IkReal(1.07000000000000))*(x6)))+(((IkReal(-1.39500000000000))*(x27)))+(((IkReal(0.200000000000000))*(x24)))+(((x10)*(((((IkReal(-0.208000000000000))*(x27)))+(((IkReal(-0.208000000000000))*(x26))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.208000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((py)+(((IkReal(-0.208000000000000))*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.778000000000000))+(((IkReal(-0.208000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x52=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x53=IKasin(((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x53)))+(((IkReal(-1.00000000000000))*(x52))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x53)+(((IkReal(-1.00000000000000))*(x52))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x54=IKasin(((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px)))));
j2array[0]=((IkReal(-2.99919384288122))+(((IkReal(-1.00000000000000))*(x54))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(0.142398810708569))+(x54));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x55=((IkReal(1.39500000000000))*(cj2));
IkReal x56=((cj0)*(px));
IkReal x57=((py)*(sj0));
IkReal x58=((IkReal(0.200000000000000))*(sj2));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(0.449190000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x57)*(x58)))+(((IkReal(-1.00000000000000))*(x55)*(x56)))+(((IkReal(0.0644000000000000))*(sj2)))+(((IkReal(1.07000000000000))*(pz)))+(((IkReal(-1.39500000000000))*(pz)*(sj2)))+(((IkReal(0.200000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x55)*(x57)))));
IkReal x59=((IkReal(21.6614906832298))*(cj2));
IkReal x60=((cj0)*(px));
IkReal x61=((py)*(sj0));
IkReal x62=((IkReal(3.10559006211180))*(sj2));
dummyeval[0]=((((IkReal(3.10559006211180))*(cj2)*(pz)))+(((IkReal(-21.6614906832298))*(pz)*(sj2)))+(sj2)+(((IkReal(16.6149068322981))*(pz)))+(((IkReal(-1.00000000000000))*(x61)*(x62)))+(((IkReal(-1.00000000000000))*(x59)*(x60)))+(((IkReal(-1.00000000000000))*(x60)*(x62)))+(((IkReal(6.97500000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x59)*(x61))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x63=((IkReal(0.200000000000000))*(cj2));
IkReal x64=((cj0)*(px));
IkReal x65=((py)*(sj0));
IkReal x66=((IkReal(1.39500000000000))*(sj2));
gconst0=IKsign(((IkReal(0.344540000000000))+(((x65)*(x66)))+(((IkReal(-0.449190000000000))*(sj2)))+(((IkReal(-0.200000000000000))*(pz)*(sj2)))+(((IkReal(0.0644000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x63)*(x64)))+(((x64)*(x66)))+(((IkReal(-1.39500000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x63)*(x65)))+(((IkReal(-1.07000000000000))*(x64)))+(((IkReal(-1.07000000000000))*(x65)))));
IkReal x67=((IkReal(21.6614906832298))*(sj2));
IkReal x68=((py)*(sj0));
IkReal x69=((cj0)*(px));
IkReal x70=((IkReal(3.10559006211180))*(cj2));
dummyeval[0]=((IkReal(5.35000000000000))+(((IkReal(-3.10559006211180))*(pz)*(sj2)))+(((IkReal(-16.6149068322981))*(x69)))+(((IkReal(-16.6149068322981))*(x68)))+(((x67)*(x68)))+(cj2)+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((IkReal(-21.6614906832298))*(cj2)*(pz)))+(((IkReal(-6.97500000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x68)*(x70)))+(((x67)*(x69))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x71=(sj2)*(sj2);
IkReal x72=(cj2)*(cj2);
IkReal x73=((cj2)*(sj2));
IkReal x74=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst0)*(((IkReal(-1.14490000000000))+((pz)*(pz))+(((IkReal(-0.0400000000000000))*(x72)))+(((IkReal(0.558000000000000))*(x73)))+(((IkReal(-0.428000000000000))*(cj2)))+(((IkReal(-1.94602500000000))*(x71)))+(((IkReal(2.98530000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x74)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x74)))+(((IkReal(0.322000000000000))*(pz)))+(((IkReal(-0.279000000000000))*(x72)))+(((IkReal(0.279000000000000))*(x71)))+(((IkReal(1.90602500000000))*(x73)))+(((IkReal(-1.49265000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst0)*(((IkReal(-1.14490000000000))+((pz)*(pz))+(((IkReal(-0.0400000000000000))*(x72)))+(((IkReal(0.558000000000000))*(x73)))+(((IkReal(-0.428000000000000))*(cj2)))+(((IkReal(-1.94602500000000))*(x71)))+(((IkReal(2.98530000000000))*(sj2)))))), ((gconst0)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x74)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x74)))+(((IkReal(0.322000000000000))*(pz)))+(((IkReal(-0.279000000000000))*(x72)))+(((IkReal(0.279000000000000))*(x71)))+(((IkReal(1.90602500000000))*(x73)))+(((IkReal(-1.49265000000000))*(cj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x75=IKsin(j1);
IkReal x76=IKcos(j1);
IkReal x77=((cj0)*(px));
IkReal x78=((IkReal(1.39500000000000))*(cj2));
IkReal x79=((IkReal(0.200000000000000))*(sj2));
IkReal x80=((py)*(sj0));
IkReal x81=((IkReal(1.39500000000000))*(sj2));
IkReal x82=((IkReal(0.200000000000000))*(cj2));
IkReal x83=((IkReal(0.200000000000000))*(x75));
IkReal x84=((IkReal(1.00000000000000))*(x76));
IkReal x85=((pz)*(x76));
IkReal x86=((IkReal(2.14000000000000))*(x75));
evalcond[0]=((IkReal(-1.07000000000000))+(((IkReal(-1.00000000000000))*(x82)))+(((x75)*(x80)))+(((IkReal(-0.322000000000000))*(x75)))+(((x75)*(x77)))+(x81)+(x85));
evalcond[1]=((((IkReal(-1.00000000000000))*(x77)*(x84)))+(((IkReal(0.322000000000000))*(x76)))+(x79)+(x78)+(((pz)*(x75)))+(((IkReal(-1.00000000000000))*(x80)*(x84))));
evalcond[2]=((((x76)*(x81)))+(((IkReal(-1.07000000000000))*(x76)))+(((x75)*(x79)))+(((IkReal(-1.00000000000000))*(x76)*(x82)))+(pz)+(((x75)*(x78))));
evalcond[3]=((IkReal(0.737562000000000))+(((IkReal(2.14000000000000))*(x85)))+(((IkReal(-1.00000000000000))*(pp)))+(((x77)*(x86)))+(((IkReal(0.644000000000000))*(x77)))+(((x80)*(x86)))+(((IkReal(0.644000000000000))*(x80)))+(((IkReal(-0.689080000000000))*(x75))));
evalcond[4]=((IkReal(0.322000000000000))+(((x76)*(x79)))+(((x76)*(x78)))+(((IkReal(-1.00000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x75)*(x81)))+(((x75)*(x82)))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(1.07000000000000))*(x75))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x226=(sj2)*(sj2);
IkReal x227=(cj2)*(cj2);
IkReal x228=((cj2)*(sj2));
if( IKabs(((gconst1)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(0.279000000000000))*(x226)))+(((IkReal(-0.279000000000000))*(x227)))+(((IkReal(1.90602500000000))*(x228)))+(((IkReal(-0.322000000000000))*(pz)))+(((cj0)*(px)*(pz)))+(((py)*(pz)*(sj0)))+(((IkReal(-1.49265000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-0.0400000000000000))*(x226)))+((pz)*(pz))+(((IkReal(-1.94602500000000))*(x227)))+(((IkReal(-0.558000000000000))*(x228))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst1)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(0.279000000000000))*(x226)))+(((IkReal(-0.279000000000000))*(x227)))+(((IkReal(1.90602500000000))*(x228)))+(((IkReal(-0.322000000000000))*(pz)))+(((cj0)*(px)*(pz)))+(((py)*(pz)*(sj0)))+(((IkReal(-1.49265000000000))*(cj2)))))), ((gconst1)*(((((IkReal(-0.0400000000000000))*(x226)))+((pz)*(pz))+(((IkReal(-1.94602500000000))*(x227)))+(((IkReal(-0.558000000000000))*(x228)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x229=IKsin(j1);
IkReal x230=IKcos(j1);
IkReal x231=((cj0)*(px));
IkReal x232=((IkReal(1.39500000000000))*(cj2));
IkReal x233=((IkReal(0.200000000000000))*(sj2));
IkReal x234=((py)*(sj0));
IkReal x235=((IkReal(1.39500000000000))*(sj2));
IkReal x236=((IkReal(0.200000000000000))*(cj2));
IkReal x237=((IkReal(0.200000000000000))*(x229));
IkReal x238=((IkReal(1.00000000000000))*(x230));
IkReal x239=((pz)*(x230));
IkReal x240=((IkReal(2.14000000000000))*(x229));
evalcond[0]=((IkReal(-1.07000000000000))+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-0.322000000000000))*(x229)))+(x239)+(x235)+(((x229)*(x234)))+(((x229)*(x231))));
evalcond[1]=((((pz)*(x229)))+(((IkReal(-1.00000000000000))*(x231)*(x238)))+(x232)+(x233)+(((IkReal(0.322000000000000))*(x230)))+(((IkReal(-1.00000000000000))*(x234)*(x238))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x230)*(x236)))+(((x229)*(x233)))+(((IkReal(-1.07000000000000))*(x230)))+(((x229)*(x232)))+(pz)+(((x230)*(x235))));
evalcond[3]=((IkReal(0.737562000000000))+(((IkReal(0.644000000000000))*(x234)))+(((IkReal(-0.689080000000000))*(x229)))+(((IkReal(0.644000000000000))*(x231)))+(((x234)*(x240)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(2.14000000000000))*(x239)))+(((x231)*(x240))));
evalcond[4]=((IkReal(0.322000000000000))+(((IkReal(1.07000000000000))*(x229)))+(((IkReal(-1.00000000000000))*(x231)))+(((x230)*(x233)))+(((IkReal(-1.00000000000000))*(x229)*(x235)))+(((x229)*(x236)))+(((IkReal(-1.00000000000000))*(x234)))+(((x230)*(x232))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x241=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x242=IKasin(((IkReal(0.0110000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(x241))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x241)))+(x242));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x243=IKasin(((IkReal(1.00382550601874))+(((IkReal(0.213540245889349))*(py)*(sj0)))+(((IkReal(-0.331584232747436))*(pp)))+(((IkReal(0.213540245889349))*(cj0)*(px)))));
j2array[0]=((IkReal(-2.99919384288122))+(((IkReal(-1.00000000000000))*(x243))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(0.142398810708569))+(x243));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x244=((IkReal(1.39500000000000))*(cj2));
IkReal x245=((cj0)*(px));
IkReal x246=((py)*(sj0));
IkReal x247=((IkReal(0.200000000000000))*(sj2));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x244)*(x246)))+(((IkReal(-1.00000000000000))*(x246)*(x247)))+(((IkReal(-1.00000000000000))*(x244)*(x245)))+(((IkReal(0.449190000000000))*(cj2)))+(((IkReal(0.0644000000000000))*(sj2)))+(((IkReal(1.07000000000000))*(pz)))+(((IkReal(-1.39500000000000))*(pz)*(sj2)))+(((IkReal(0.200000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x245)*(x247)))));
IkReal x248=((IkReal(21.6614906832298))*(cj2));
IkReal x249=((cj0)*(px));
IkReal x250=((py)*(sj0));
IkReal x251=((IkReal(3.10559006211180))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((IkReal(3.10559006211180))*(cj2)*(pz)))+(((IkReal(-21.6614906832298))*(pz)*(sj2)))+(sj2)+(((IkReal(16.6149068322981))*(pz)))+(((IkReal(-1.00000000000000))*(x249)*(x251)))+(((IkReal(-1.00000000000000))*(x250)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(6.97500000000000))*(cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x252=((IkReal(0.200000000000000))*(cj2));
IkReal x253=((cj0)*(px));
IkReal x254=((py)*(sj0));
IkReal x255=((IkReal(1.39500000000000))*(sj2));
gconst0=IKsign(((IkReal(0.344540000000000))+(((IkReal(-0.449190000000000))*(sj2)))+(((IkReal(-0.200000000000000))*(pz)*(sj2)))+(((x254)*(x255)))+(((IkReal(-1.00000000000000))*(x252)*(x254)))+(((IkReal(-1.00000000000000))*(x252)*(x253)))+(((x253)*(x255)))+(((IkReal(0.0644000000000000))*(cj2)))+(((IkReal(-1.07000000000000))*(x253)))+(((IkReal(-1.39500000000000))*(cj2)*(pz)))+(((IkReal(-1.07000000000000))*(x254)))));
IkReal x256=((IkReal(21.6614906832298))*(sj2));
IkReal x257=((py)*(sj0));
IkReal x258=((cj0)*(px));
IkReal x259=((IkReal(3.10559006211180))*(cj2));
dummyeval[0]=((IkReal(5.35000000000000))+(((IkReal(-3.10559006211180))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x258)*(x259)))+(((IkReal(-16.6149068322981))*(x257)))+(((x256)*(x257)))+(((x256)*(x258)))+(cj2)+(((IkReal(-21.6614906832298))*(cj2)*(pz)))+(((IkReal(-6.97500000000000))*(sj2)))+(((IkReal(-16.6149068322981))*(x258)))+(((IkReal(-1.00000000000000))*(x257)*(x259))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x260=(sj2)*(sj2);
IkReal x261=(cj2)*(cj2);
IkReal x262=((cj2)*(sj2));
IkReal x263=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst0)*(((IkReal(-1.14490000000000))+(((IkReal(-0.0400000000000000))*(x261)))+(((IkReal(0.558000000000000))*(x262)))+((pz)*(pz))+(((IkReal(-0.428000000000000))*(cj2)))+(((IkReal(-1.94602500000000))*(x260)))+(((IkReal(2.98530000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-0.279000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x263)))+(((IkReal(0.279000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x263)))+(((IkReal(0.322000000000000))*(pz)))+(((IkReal(1.90602500000000))*(x262)))+(((IkReal(-1.49265000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst0)*(((IkReal(-1.14490000000000))+(((IkReal(-0.0400000000000000))*(x261)))+(((IkReal(0.558000000000000))*(x262)))+((pz)*(pz))+(((IkReal(-0.428000000000000))*(cj2)))+(((IkReal(-1.94602500000000))*(x260)))+(((IkReal(2.98530000000000))*(sj2)))))), ((gconst0)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-0.279000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x263)))+(((IkReal(0.279000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x263)))+(((IkReal(0.322000000000000))*(pz)))+(((IkReal(1.90602500000000))*(x262)))+(((IkReal(-1.49265000000000))*(cj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x264=IKsin(j1);
IkReal x265=IKcos(j1);
IkReal x266=((cj0)*(px));
IkReal x267=((IkReal(1.39500000000000))*(cj2));
IkReal x268=((IkReal(0.200000000000000))*(sj2));
IkReal x269=((py)*(sj0));
IkReal x270=((IkReal(1.39500000000000))*(sj2));
IkReal x271=((IkReal(0.200000000000000))*(cj2));
IkReal x272=((IkReal(0.200000000000000))*(x264));
IkReal x273=((IkReal(1.00000000000000))*(x265));
IkReal x274=((pz)*(x265));
IkReal x275=((IkReal(2.14000000000000))*(x264));
evalcond[0]=((IkReal(-1.07000000000000))+(((x264)*(x269)))+(((IkReal(-0.322000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x271)))+(x274)+(x270)+(((x264)*(x266))));
evalcond[1]=((((pz)*(x264)))+(((IkReal(-1.00000000000000))*(x269)*(x273)))+(((IkReal(-1.00000000000000))*(x266)*(x273)))+(((IkReal(0.322000000000000))*(x265)))+(x267)+(x268));
evalcond[2]=((((x264)*(x268)))+(((x265)*(x270)))+(pz)+(((x264)*(x267)))+(((IkReal(-1.00000000000000))*(x265)*(x271)))+(((IkReal(-1.07000000000000))*(x265))));
evalcond[3]=((IkReal(0.737562000000000))+(((x266)*(x275)))+(((IkReal(-1.00000000000000))*(pp)))+(((x269)*(x275)))+(((IkReal(0.644000000000000))*(x269)))+(((IkReal(0.644000000000000))*(x266)))+(((IkReal(2.14000000000000))*(x274)))+(((IkReal(-0.689080000000000))*(x264))));
evalcond[4]=((IkReal(0.322000000000000))+(((IkReal(1.07000000000000))*(x264)))+(((x265)*(x268)))+(((x264)*(x271)))+(((IkReal(-1.00000000000000))*(x264)*(x270)))+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x266)))+(((x265)*(x267))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x276=(sj2)*(sj2);
IkReal x277=(cj2)*(cj2);
IkReal x278=((cj2)*(sj2));
if( IKabs(((gconst1)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-0.279000000000000))*(x277)))+(((IkReal(1.90602500000000))*(x278)))+(((IkReal(0.279000000000000))*(x276)))+(((IkReal(-0.322000000000000))*(pz)))+(((cj0)*(px)*(pz)))+(((py)*(pz)*(sj0)))+(((IkReal(-1.49265000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.94602500000000))*(x277)))+(((IkReal(-0.558000000000000))*(x278)))+(((IkReal(-0.0400000000000000))*(x276)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst1)*(((((IkReal(-0.214000000000000))*(sj2)))+(((IkReal(-0.279000000000000))*(x277)))+(((IkReal(1.90602500000000))*(x278)))+(((IkReal(0.279000000000000))*(x276)))+(((IkReal(-0.322000000000000))*(pz)))+(((cj0)*(px)*(pz)))+(((py)*(pz)*(sj0)))+(((IkReal(-1.49265000000000))*(cj2)))))), ((gconst1)*(((((IkReal(-1.94602500000000))*(x277)))+(((IkReal(-0.558000000000000))*(x278)))+(((IkReal(-0.0400000000000000))*(x276)))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x279=IKsin(j1);
IkReal x280=IKcos(j1);
IkReal x281=((cj0)*(px));
IkReal x282=((IkReal(1.39500000000000))*(cj2));
IkReal x283=((IkReal(0.200000000000000))*(sj2));
IkReal x284=((py)*(sj0));
IkReal x285=((IkReal(1.39500000000000))*(sj2));
IkReal x286=((IkReal(0.200000000000000))*(cj2));
IkReal x287=((IkReal(0.200000000000000))*(x279));
IkReal x288=((IkReal(1.00000000000000))*(x280));
IkReal x289=((pz)*(x280));
IkReal x290=((IkReal(2.14000000000000))*(x279));
evalcond[0]=((IkReal(-1.07000000000000))+(((IkReal(-0.322000000000000))*(x279)))+(x289)+(x285)+(((x279)*(x281)))+(((IkReal(-1.00000000000000))*(x286)))+(((x279)*(x284))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x281)*(x288)))+(x283)+(x282)+(((pz)*(x279)))+(((IkReal(0.322000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x284)*(x288))));
evalcond[2]=((((x280)*(x285)))+(((x279)*(x282)))+(((IkReal(-1.00000000000000))*(x280)*(x286)))+(pz)+(((x279)*(x283)))+(((IkReal(-1.07000000000000))*(x280))));
evalcond[3]=((IkReal(0.737562000000000))+(((IkReal(0.644000000000000))*(x284)))+(((x284)*(x290)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(2.14000000000000))*(x289)))+(((IkReal(0.644000000000000))*(x281)))+(((x281)*(x290)))+(((IkReal(-0.689080000000000))*(x279))));
evalcond[4]=((IkReal(0.322000000000000))+(((IkReal(1.07000000000000))*(x279)))+(((IkReal(-1.00000000000000))*(x279)*(x285)))+(((IkReal(-1.00000000000000))*(x281)))+(((x280)*(x283)))+(((IkReal(-1.00000000000000))*(x284)))+(((x279)*(x286)))+(((x280)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x87=((cj0)*(r00));
IkReal x88=((cj0)*(r01));
IkReal x89=((sj1)*(sj2));
IkReal x90=((IkReal(1.00000000000000))*(sj0));
IkReal x91=((r10)*(sj0));
IkReal x92=((IkReal(1.00000000000000))*(cj2));
IkReal x93=((r12)*(sj0));
IkReal x94=((cj0)*(r02));
IkReal x95=((r11)*(sj0));
IkReal x96=((((IkReal(-1.00000000000000))*(cj1)*(x92)))+(x89));
IkReal x97=((((IkReal(-1.00000000000000))*(x89)))+(((cj1)*(cj2))));
IkReal x98=((cj0)*(x97));
IkReal x99=((((IkReal(-1.00000000000000))*(cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(x92))));
IkReal x100=((sj0)*(x99));
new_r00=((((x91)*(x99)))+(((x87)*(x99)))+(((r20)*(x96))));
new_r01=((((r21)*(x96)))+(((x88)*(x99)))+(((x95)*(x99))));
new_r02=((((x94)*(x99)))+(((x93)*(x99)))+(((r22)*(x96))));
new_r10=((((cj0)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(x90))));
new_r11=((((IkReal(-1.00000000000000))*(r01)*(x90)))+(((cj0)*(r11))));
new_r12=((((IkReal(-1.00000000000000))*(r02)*(x90)))+(((cj0)*(r12))));
new_r20=((((r20)*(x99)))+(((x87)*(x97)))+(((x91)*(x97))));
new_r21=((((x95)*(x97)))+(((x88)*(x97)))+(((r21)*(x99))));
new_r22=((((x93)*(x97)))+(((r22)*(x99)))+(((x94)*(x97))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((new_r10)*(new_r12)*(sj4)))+(((new_r00)*(new_r02)*(sj4)))));
dummyeval[0]=((((new_r10)*(new_r12)*(sj4)))+(((new_r00)*(new_r02)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x101=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x101;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x101;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x102=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x102));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x102))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x103=IKsin(j5);
IkReal x104=((IkReal(1.00000000000000))*(sj3));
IkReal x105=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x104)))+(((IkReal(-1.00000000000000))*(x103)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x104)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x105))));
evalcond[2]=((((new_r11)*(sj3)))+(x103)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x105)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j4, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x106=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x106));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x106))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x107=IKcos(j5);
IkReal x108=((IkReal(1.00000000000000))*(sj3));
IkReal x109=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x109)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x108))));
evalcond[1]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x108)))+(((IkReal(-1.00000000000000))*(x107))));
evalcond[2]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x109)))+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(x107)+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x110=((IkReal(-1.00000000000000))*(cj4)*(gconst3)*(new_r20));
if( IKabs(((new_r12)*(x110))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x110))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x110)), ((new_r02)*(x110)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x111=IKsin(j3);
IkReal x112=IKcos(j3);
IkReal x113=((IkReal(1.00000000000000))*(sj4));
IkReal x114=((sj4)*(x111));
IkReal x115=((sj4)*(x112));
IkReal x116=((new_r02)*(x112));
IkReal x117=((new_r12)*(x111));
evalcond[0]=((((new_r12)*(x112)))+(((IkReal(-1.00000000000000))*(new_r02)*(x111))));
evalcond[1]=((x117)+(x116)+(((IkReal(-1.00000000000000))*(x113))));
evalcond[2]=((((new_r10)*(x114)))+(((new_r00)*(x115)))+(((cj4)*(new_r20))));
evalcond[3]=((((new_r01)*(x115)))+(((cj4)*(new_r21)))+(((new_r11)*(x114))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r02)*(x115)))+(((cj4)*(new_r22)))+(((new_r12)*(x114))));
evalcond[5]=((((cj4)*(x116)))+(((cj4)*(x117)))+(((IkReal(-1.00000000000000))*(new_r22)*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x118=((IkReal(-1.00000000000000))+(new_r22));
IkReal x119=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj3))));
IkReal x120=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x118;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x119;
evalcond[5]=x119;
evalcond[6]=x120;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x118;
evalcond[10]=x120;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x121=IKsin(j5);
IkReal x122=((IkReal(1.00000000000000))*(sj3));
IkReal x123=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x122)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x122)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x123))));
evalcond[2]=((((new_r11)*(sj3)))+(x121)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x123)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x124=((new_r12)*(sj3));
IkReal x125=((IkReal(1.00000000000000))*(new_r02));
IkReal x126=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj3)*(x125))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j4, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x126;
evalcond[5]=x126;
evalcond[6]=((x124)+(((cj3)*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj3)*(x125)))+(((IkReal(-1.00000000000000))*(x124))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x127=IKcos(j5);
IkReal x128=((IkReal(1.00000000000000))*(sj3));
IkReal x129=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x129)))+(((IkReal(-1.00000000000000))*(new_r00)*(x128)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x127)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x128))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x129)))+(((new_r11)*(sj3)))+(((cj3)*(new_r01))));
evalcond[3]=((x127)+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x130=IKsin(j5);
IkReal x131=IKcos(j5);
IkReal x132=((IkReal(1.00000000000000))*(sj3));
IkReal x133=((new_r11)*(sj3));
IkReal x134=((new_r10)*(sj3));
IkReal x135=((cj3)*(cj4));
IkReal x136=((IkReal(1.00000000000000))*(sj4));
IkReal x137=((IkReal(1.00000000000000))*(x131));
IkReal x138=((IkReal(1.00000000000000))*(x130));
evalcond[0]=((new_r20)+(((sj4)*(x131))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x130)*(x136))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x138)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x132))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x137)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x132))));
evalcond[4]=((((cj4)*(x130)))+(x133)+(((cj3)*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x137)))+(x134)+(((cj3)*(new_r00))));
evalcond[6]=((((cj4)*(x133)))+(((IkReal(-1.00000000000000))*(new_r21)*(x136)))+(((new_r01)*(x135)))+(x130));
evalcond[7]=((((IkReal(-1.00000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(new_r20)*(x136)))+(((cj4)*(x134)))+(((new_r00)*(x135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x139=IKsin(j5);
IkReal x140=IKcos(j5);
IkReal x141=((IkReal(1.00000000000000))*(sj3));
IkReal x142=((new_r11)*(sj3));
IkReal x143=((new_r10)*(sj3));
IkReal x144=((cj3)*(cj4));
IkReal x145=((IkReal(1.00000000000000))*(sj4));
IkReal x146=((IkReal(1.00000000000000))*(x140));
IkReal x147=((IkReal(1.00000000000000))*(x139));
evalcond[0]=((new_r20)+(((sj4)*(x140))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x139)*(x145))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x141)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x147))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x141)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x146))));
evalcond[4]=((((cj4)*(x139)))+(x142)+(((cj3)*(new_r01))));
evalcond[5]=((x143)+(((IkReal(-1.00000000000000))*(cj4)*(x146)))+(((cj3)*(new_r00))));
evalcond[6]=((((cj4)*(x142)))+(((IkReal(-1.00000000000000))*(new_r21)*(x145)))+(((new_r01)*(x144)))+(x139));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x145)))+(((IkReal(-1.00000000000000))*(x146)))+(((new_r00)*(x144)))+(((cj4)*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst5)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst5)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x148=IKsin(j5);
IkReal x149=IKcos(j5);
IkReal x150=((IkReal(1.00000000000000))*(sj3));
IkReal x151=((new_r11)*(sj3));
IkReal x152=((new_r10)*(sj3));
IkReal x153=((cj3)*(cj4));
IkReal x154=((IkReal(1.00000000000000))*(sj4));
IkReal x155=((IkReal(1.00000000000000))*(x149));
IkReal x156=((IkReal(1.00000000000000))*(x148));
evalcond[0]=((new_r20)+(((sj4)*(x149))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x148)*(x154))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x150)))+(((IkReal(-1.00000000000000))*(x156)))+(((cj3)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(new_r01)*(x150)))+(((cj3)*(new_r11))));
evalcond[4]=((x151)+(((cj4)*(x148)))+(((cj3)*(new_r01))));
evalcond[5]=((x152)+(((IkReal(-1.00000000000000))*(cj4)*(x155)))+(((cj3)*(new_r00))));
evalcond[6]=((((new_r01)*(x153)))+(((IkReal(-1.00000000000000))*(new_r21)*(x154)))+(((cj4)*(x151)))+(x148));
evalcond[7]=((((IkReal(-1.00000000000000))*(x155)))+(((cj4)*(x152)))+(((IkReal(-1.00000000000000))*(new_r20)*(x154)))+(((new_r00)*(x153))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x157=((gconst2)*(sj4));
if( IKabs(((new_r12)*(x157))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x157))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x157)), ((new_r02)*(x157)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x158=IKsin(j3);
IkReal x159=IKcos(j3);
IkReal x160=((IkReal(1.00000000000000))*(sj4));
IkReal x161=((sj4)*(x158));
IkReal x162=((sj4)*(x159));
IkReal x163=((new_r02)*(x159));
IkReal x164=((new_r12)*(x158));
evalcond[0]=((((new_r12)*(x159)))+(((IkReal(-1.00000000000000))*(new_r02)*(x158))));
evalcond[1]=((x163)+(x164)+(((IkReal(-1.00000000000000))*(x160))));
evalcond[2]=((((new_r00)*(x162)))+(((new_r10)*(x161)))+(((cj4)*(new_r20))));
evalcond[3]=((((new_r01)*(x162)))+(((cj4)*(new_r21)))+(((new_r11)*(x161))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r02)*(x162)))+(((new_r12)*(x161)))+(((cj4)*(new_r22))));
evalcond[5]=((((cj4)*(x163)))+(((cj4)*(x164)))+(((IkReal(-1.00000000000000))*(new_r22)*(x160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x165=((IkReal(-1.00000000000000))+(new_r22));
IkReal x166=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj3))));
IkReal x167=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x165;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x166;
evalcond[5]=x166;
evalcond[6]=x167;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x165;
evalcond[10]=x167;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r01)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x168=IKsin(j5);
IkReal x169=((IkReal(1.00000000000000))*(sj3));
IkReal x170=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x169)))+(((IkReal(-1.00000000000000))*(x168)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x169)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x170))));
evalcond[2]=((((new_r11)*(sj3)))+(x168)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x170)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x171=((new_r12)*(sj3));
IkReal x172=((IkReal(1.00000000000000))*(new_r02));
IkReal x173=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj3)*(x172))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j4, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x173;
evalcond[5]=x173;
evalcond[6]=((x171)+(((cj3)*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj3)*(x172)))+(((IkReal(-1.00000000000000))*(x171))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x174=IKcos(j5);
IkReal x175=((IkReal(1.00000000000000))*(sj3));
IkReal x176=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x176)))+(((IkReal(-1.00000000000000))*(new_r00)*(x175))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x174)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x175))));
evalcond[2]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x176)))+(((cj3)*(new_r01))));
evalcond[3]=((x174)+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj3)))+(((cj3)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x177=IKsin(j5);
IkReal x178=IKcos(j5);
IkReal x179=((IkReal(1.00000000000000))*(sj3));
IkReal x180=((new_r11)*(sj3));
IkReal x181=((new_r10)*(sj3));
IkReal x182=((cj3)*(cj4));
IkReal x183=((IkReal(1.00000000000000))*(sj4));
IkReal x184=((IkReal(1.00000000000000))*(x178));
IkReal x185=((IkReal(1.00000000000000))*(x177));
evalcond[0]=((new_r20)+(((sj4)*(x178))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x177)*(x183))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x185)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x179))));
evalcond[3]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r01)*(x179))));
evalcond[4]=((((cj4)*(x177)))+(x180)+(((cj3)*(new_r01))));
evalcond[5]=((x181)+(((IkReal(-1.00000000000000))*(cj4)*(x184)))+(((cj3)*(new_r00))));
evalcond[6]=((x177)+(((cj4)*(x180)))+(((new_r01)*(x182)))+(((IkReal(-1.00000000000000))*(new_r21)*(x183))));
evalcond[7]=((((cj4)*(x181)))+(((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r20)*(x183)))+(((new_r00)*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x186=IKsin(j5);
IkReal x187=IKcos(j5);
IkReal x188=((IkReal(1.00000000000000))*(sj3));
IkReal x189=((new_r11)*(sj3));
IkReal x190=((new_r10)*(sj3));
IkReal x191=((cj3)*(cj4));
IkReal x192=((IkReal(1.00000000000000))*(sj4));
IkReal x193=((IkReal(1.00000000000000))*(x187));
IkReal x194=((IkReal(1.00000000000000))*(x186));
evalcond[0]=((((sj4)*(x187)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x186)*(x192))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x188)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x194))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x193)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x188))));
evalcond[4]=((((cj4)*(x186)))+(x189)+(((cj3)*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x193)))+(x190)+(((cj3)*(new_r00))));
evalcond[6]=((x186)+(((new_r01)*(x191)))+(((cj4)*(x189)))+(((IkReal(-1.00000000000000))*(new_r21)*(x192))));
evalcond[7]=((((cj4)*(x190)))+(((IkReal(-1.00000000000000))*(x193)))+(((new_r00)*(x191)))+(((IkReal(-1.00000000000000))*(new_r20)*(x192))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst5)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst5)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x195=IKsin(j5);
IkReal x196=IKcos(j5);
IkReal x197=((IkReal(1.00000000000000))*(sj3));
IkReal x198=((new_r11)*(sj3));
IkReal x199=((new_r10)*(sj3));
IkReal x200=((cj3)*(cj4));
IkReal x201=((IkReal(1.00000000000000))*(sj4));
IkReal x202=((IkReal(1.00000000000000))*(x196));
IkReal x203=((IkReal(1.00000000000000))*(x195));
evalcond[0]=((new_r20)+(((sj4)*(x196))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x195)*(x201))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r00)*(x197)))+(((cj3)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x202)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x197))));
evalcond[4]=((x198)+(((cj4)*(x195)))+(((cj3)*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x202)))+(x199)+(((cj3)*(new_r00))));
evalcond[6]=((x195)+(((cj4)*(x198)))+(((new_r01)*(x200)))+(((IkReal(-1.00000000000000))*(new_r21)*(x201))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x201)))+(((IkReal(-1.00000000000000))*(x202)))+(((cj4)*(x199)))+(((new_r00)*(x200))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst4)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst4)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj4)*(IKcos(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(IKsin(j5))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x204=((cj4)*(gconst7)*(sj5));
if( IKabs(((new_r12)*(x204))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x204))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x204)), ((new_r02)*(x204)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x205=IKsin(j3);
IkReal x206=IKcos(j3);
IkReal x207=((IkReal(1.00000000000000))*(cj5));
IkReal x208=((IkReal(1.00000000000000))*(sj4));
IkReal x209=((cj4)*(x206));
IkReal x210=((sj4)*(x206));
IkReal x211=((cj4)*(x205));
IkReal x212=((new_r11)*(x205));
IkReal x213=((sj4)*(x205));
IkReal x214=((IkReal(1.00000000000000))*(x205));
evalcond[0]=((((new_r12)*(x206)))+(((IkReal(-1.00000000000000))*(new_r02)*(x214))));
evalcond[1]=((((new_r12)*(x205)))+(((new_r02)*(x206)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x214)))+(((new_r10)*(x206)))+(((IkReal(-1.00000000000000))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x214)))+(((new_r11)*(x206)))+(((IkReal(-1.00000000000000))*(x207))));
evalcond[4]=((x212)+(((new_r01)*(x206)))+(((cj4)*(sj5))));
evalcond[5]=((((new_r00)*(x206)))+(((new_r10)*(x205)))+(((IkReal(-1.00000000000000))*(cj4)*(x207))));
evalcond[6]=((((cj4)*(new_r20)))+(((new_r00)*(x210)))+(((new_r10)*(x213))));
evalcond[7]=((((sj4)*(x212)))+(((new_r01)*(x210)))+(((cj4)*(new_r21))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r12)*(x213)))+(((cj4)*(new_r22)))+(((new_r02)*(x210))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x208)))+(((new_r12)*(x211)))+(((new_r02)*(x209))));
evalcond[10]=((sj5)+(((new_r11)*(x211)))+(((new_r01)*(x209)))+(((IkReal(-1.00000000000000))*(new_r21)*(x208))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x208)))+(((new_r10)*(x211)))+(((new_r00)*(x209)))+(((IkReal(-1.00000000000000))*(x207))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x215=((gconst6)*(sj4));
if( IKabs(((new_r12)*(x215))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x215))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x215)), ((new_r02)*(x215)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x216=IKsin(j3);
IkReal x217=IKcos(j3);
IkReal x218=((IkReal(1.00000000000000))*(cj5));
IkReal x219=((IkReal(1.00000000000000))*(sj4));
IkReal x220=((cj4)*(x217));
IkReal x221=((sj4)*(x217));
IkReal x222=((cj4)*(x216));
IkReal x223=((new_r11)*(x216));
IkReal x224=((sj4)*(x216));
IkReal x225=((IkReal(1.00000000000000))*(x216));
evalcond[0]=((((new_r12)*(x217)))+(((IkReal(-1.00000000000000))*(new_r02)*(x225))));
evalcond[1]=((((new_r02)*(x217)))+(((IkReal(-1.00000000000000))*(x219)))+(((new_r12)*(x216))));
evalcond[2]=((((new_r10)*(x217)))+(((IkReal(-1.00000000000000))*(new_r00)*(x225)))+(((IkReal(-1.00000000000000))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x225)))+(((IkReal(-1.00000000000000))*(x218)))+(((new_r11)*(x217))));
evalcond[4]=((((new_r01)*(x217)))+(x223)+(((cj4)*(sj5))));
evalcond[5]=((((new_r10)*(x216)))+(((IkReal(-1.00000000000000))*(cj4)*(x218)))+(((new_r00)*(x217))));
evalcond[6]=((((new_r10)*(x224)))+(((new_r00)*(x221)))+(((cj4)*(new_r20))));
evalcond[7]=((((new_r01)*(x221)))+(((sj4)*(x223)))+(((cj4)*(new_r21))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r02)*(x221)))+(((cj4)*(new_r22)))+(((new_r12)*(x224))));
evalcond[9]=((((new_r12)*(x222)))+(((new_r02)*(x220)))+(((IkReal(-1.00000000000000))*(new_r22)*(x219))));
evalcond[10]=((sj5)+(((IkReal(-1.00000000000000))*(new_r21)*(x219)))+(((new_r11)*(x222)))+(((new_r01)*(x220))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x218)))+(((new_r00)*(x220)))+(((new_r10)*(x222)))+(((IkReal(-1.00000000000000))*(new_r20)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - abb_irb6640 (2ce326dd47b75c839907f85cd7e9cd27)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
